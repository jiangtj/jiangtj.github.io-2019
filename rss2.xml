<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kurome ☀</title>
    <link>https://jiangtj.gitlab.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 10 Dec 2018 05:13:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Restdoc与Docsify,更简单的生成Api文档</title>
      <link>https://jiangtj.gitlab.io/articles/almond/restdoc-and-docsify/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/restdoc-and-docsify/</guid>
      <pubDate>Sun, 09 Dec 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;大半年前就写过一篇文章&lt;a href=&quot;https://jiangtj.gitlab.io/articles/almond/test-driven development/&quot;&gt;《测试驱动开发(TDD)的实践》&lt;/a&gt;，关于测试的。时至今日，我仍然坚信测试是软件开发一重要环节，它在绝大多数情况下，保障了系统的质量与稳定性。   &lt;/p&gt;
&lt;p&gt;但当时所搭的框架存在一些不足，当然主要是由于Asciidoctor。这是一个足够完善的标记语言，但也足够复杂。然而大多数情况下我们并不需要这些语法，Markdown正好足够。    &lt;/p&gt;
&lt;p&gt;事实上，当时我最先尝试的也是Markdown，使用Spring Restdoc中推荐的Slate方案，来解决Markdown无法包含问题。缺点是它运行使用的Ruby，与我所学的完全不同（Java、Js）。但最近看到了另一个文档工具Docsify，它也添加了包含功能，它足够简单，以至于看几遍例子就完全学会，虽然也有缺点，SEO方面，但内部接口文档，你会在乎这个么？下面是一个例子整合Restdoc与Docsify&lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/restdoc-and-docsify/#disqus_thread</comments>
    </item>
    
    <item>
      <title>微服务设计 - 版本控制</title>
      <link>https://jiangtj.gitlab.io/articles/almond/microservices-version-control/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/microservices-version-control/</guid>
      <pubDate>Fri, 09 Nov 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在微服务中，单个服务的升级改善是不可避免的，虽然改动最终引起Rest接口变动并不多，但仍然会出现。在《微服务设计》中，提供了两种处理方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不同的接口共存&lt;/li&gt;
&lt;li&gt;同时运行多个版本服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这本书的作者Sam Newman，他认为这两种方案都是可行的，但更倾向于不同接口共存。也提出了三点主要原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当出现问题时，不同的接口共存可以更快的修改新老版本的代码并一同部署，而另一种就比较麻烦了&lt;/li&gt;
&lt;li&gt;方案二维护困难，同时存在多个版本服务，对运维来说具有较大的挑战性&lt;/li&gt;
&lt;li&gt;持久化层可能是一样的，方案二却有不同版本的实现，会导致潜在的复杂性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但我更倾向于方案二，该方案的实际使用者主要是Netflix（Spring Cloud便是基于他开源的微服务框架研发的），在现阶段（2018年）相对于作者的年代（2015年），技术上已经有了较大的变化。微服务的设计已经在很多公司大规模的推行及使用，变得更加成熟。作者所提出的前两点问题已经有了比较好的方案减少影响    &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/microservices-version-control/#disqus_thread</comments>
    </item>
    
    <item>
      <title>简单、高效的管理hexo站点主题</title>
      <link>https://jiangtj.gitlab.io/articles/almond/hexo-theme-manage/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/hexo-theme-manage/</guid>
      <pubDate>Sun, 14 Oct 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;如果您和我一样，喜欢更新至最新的主题，那么您也应该遇到和我一样的烦恼。每次更新新的主题时，总是要重新配置，而且随着自定义的内容增多，更新就成了负担。&lt;br&gt;因此，引入了Fork与Submodules来实现以下目标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动合并自定义内容与配置&lt;/li&gt;
&lt;li&gt;校验更新操作是否正常工作&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果您不了解如何使用hexo搭建博客，您可以参考这篇博客：&lt;a href=&quot;https://jiangtj.gitlab.io/articles/almond/gitlab-pages-for-hexo/&quot;&gt;https://jiangtj.gitlab.io/articles/almond/gitlab-pages-for-hexo/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/hexo-theme-manage/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Cloud 之 Feign （Finchley版）</title>
      <link>https://jiangtj.gitlab.io/articles/almond/f-open-feign/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/f-open-feign/</guid>
      <pubDate>Tue, 31 Jul 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Feign是轻量级、声明式的Http请求客户端，它吸收了来自的Retrofit JAXRS-2.0和WebSocket的灵感，为了使写Http请求变得更容易而诞生    &lt;/p&gt;
&lt;p&gt;Feign一开始作为Eureka的子项目，用于简化Http请求。但由于其不断完善，目前作为一个轻量级、声明式的Http请求客户端项目，独立维护。在Spring Cloud中，其引入了Feign，并提供了一系列默认的配置与Spring MVC注解的支持。因此，Feign一直被作为首先的Http请求客户端。   &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/f-open-feign/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Cloud 之 Eureka （Finchley版）</title>
      <link>https://jiangtj.gitlab.io/articles/almond/f-eureka-server/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/f-eureka-server/</guid>
      <pubDate>Tue, 24 Jul 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;在微服务架构中，服务发现是最重要的一环。Spring Cloud提供多个服务注册中心作为选择，如Eureka、Consul、Zookeeper等，当然最常用的是Eureka&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Eureka由Eureka Server与Eureka Client两部分组成&lt;br&gt;Eureka Server是高可用的（可同时作为客户端向其他注册中心注册）服务发现的注册中心，为每个客户端（Eureka Client）提供注册服务，并提供已注册服务信息&lt;br&gt;Eureka Client向服务注册中心注册，并提供断路、负载均衡等功能    &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/f-eureka-server/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Boot Relaxed Binding 2.0</title>
      <link>https://jiangtj.gitlab.io/articles/almond/spring-boot-relaxed-binding-2.0/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/spring-boot-relaxed-binding-2.0/</guid>
      <pubDate>Wed, 11 Jul 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Spring Boot 中的配置绑定一直是其最主要的特性。而在Spring Boot 2.0中，该绑定方式做了大量的修改，并且借机制定一些新的规范，以减少过于宽松的绑定规则导致的一些问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;您也可以通过官方的&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Relaxed-Binding-2.0 wiki&lt;/a&gt;了解详细&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/spring-boot-relaxed-binding-2.0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Aria2 一个轻量级的命令行下载工具</title>
      <link>https://jiangtj.gitlab.io/articles/almond/aria2-info/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/aria2-info/</guid>
      <pubDate>Mon, 04 Jun 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;aria2 是一个轻量级的、多源、跨平台的命令行下载实用工具。它支持HTTP/HTTPS、FTP、SFTP、BitTorrent和Metalink。&lt;br&gt;我们可以在GitHub上下载最新的&lt;a href=&quot;https://github.com/aria2/aria2/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;稳定版&lt;/a&gt;     &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/aria2-info/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JWeb 简单的方式部署静态资源</title>
      <link>https://jiangtj.gitlab.io/articles/almond/jweb-for-static-resource/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/jweb-for-static-resource/</guid>
      <pubDate>Wed, 30 May 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;JWeb 是一个基于Spring Boot的简单服务。提供Shell脚本，以简单的方式部署以及运行静态资源&lt;/p&gt;
&lt;h1 id=&quot;缘&quot;&gt;&lt;a href=&quot;#缘&quot; class=&quot;headerlink&quot; title=&quot;缘&quot;&gt;&lt;/a&gt;缘&lt;/h1&gt;&lt;p&gt;某天晚上睡不着，充电。突然脑抽了一下，node能做到命令行快速的运行静态资源，例如&lt;a href=&quot;https://docsify.js.org/#/zh-cn/quickstart&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docsify-cli&lt;/a&gt;，能通过&lt;code&gt;docsify serve your-static-dir&lt;/code&gt;直接部署静态资源，于是我想的是，相似的功能，java也能实现的把    &lt;/p&gt;
&lt;p&gt;直接部署静态资源，在开发过程中是很有必要的，例如测试跨域问题，您必须另外起个服务。如果是下载web服务器，并将资源拖拽过去的方式，就有点麻烦咯&lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/jweb-for-static-resource/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Dart与Node对比</title>
      <link>https://jiangtj.gitlab.io/articles/almond/dart-vs-node/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/dart-vs-node/</guid>
      <pubDate>Sun, 27 May 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;node&quot;&gt;&lt;a href=&quot;#node&quot; class=&quot;headerlink&quot; title=&quot;node&quot;&gt;&lt;/a&gt;node&lt;/h2&gt;&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。&lt;br&gt;Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。&lt;br&gt;Node.js 的包管理器 npm，是全球最大的开源库生态系统。   &lt;/p&gt;
&lt;h2 id=&quot;dart&quot;&gt;&lt;a href=&quot;#dart&quot; class=&quot;headerlink&quot; title=&quot;dart&quot;&gt;&lt;/a&gt;dart&lt;/h2&gt;&lt;p&gt;Dart是谷歌开发的计算机编程语言，后来被Ecma(ECMA-408)认定为标准。它被用于web、服务器、移动应用和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。&lt;br&gt;Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system。 &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/dart-vs-node/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TICK Stack 实践之监控服务器</title>
      <link>https://jiangtj.gitlab.io/articles/almond/tick-stack-for-server/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/tick-stack-for-server/</guid>
      <pubDate>Sun, 20 May 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://www.influxdata.com/time-series-platform/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TICK Stack&lt;/a&gt;是由一系列的服务组成的监控分析处理数据的解决方案，一般用于系统监控，或者收集处理与时间紧密相关的数据。    &lt;/p&gt;
&lt;p&gt;它包含了以下服务：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Telegraf 是一个插件驱动的代理服务，用于收集并提供系统数据（如CPU、内存等）&lt;/li&gt;
&lt;li&gt;InfluxDB 是一个时序数据库，为满足高负载的读写而开发的数据库&lt;/li&gt;
&lt;li&gt;Chronograf 通过图表可视化分析数据的服务&lt;/li&gt;
&lt;li&gt;Kapacitor 是数据处理服务，用于批处理数据以及必要时提醒用户等&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/tick-stack-for-server/#disqus_thread</comments>
    </item>
    
    <item>
      <title>利用Jmeter进行压力测试</title>
      <link>https://jiangtj.gitlab.io/articles/almond/jmeter-info/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/jmeter-info/</guid>
      <pubDate>Mon, 14 May 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;压力测试（Stress Test），也称为强度测试、负载测试。压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。目前互联网的环境下，压力测试是必不可少的，其中Apache JMeter是目前主流的开源的压力测试工具。&lt;/p&gt;
&lt;p&gt;Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。&lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/jmeter-info/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git工作流</title>
      <link>https://jiangtj.gitlab.io/articles/almond/git-flow/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/git-flow/</guid>
      <pubDate>Tue, 01 May 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;选择Git工作流，和如何配合工作流工作，这是软件行业经常碰到的问题。不同的Leader会有不同方案，有好有坏。当然能应用进实际开发中的流程，只要实际操作人员足够的仔细便不会出现问题，例如最常用的&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vincent Driessen提出的Git工作流&lt;/a&gt;。     &lt;/p&gt;
&lt;p&gt;接下来，将介绍这个Git工作流，以及它所衍生出来的其它不错的工作流（GitHub Flow与GitLab Flow）    &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nvie.com/img/git-model@2x.png&quot; alt=&quot;&quot;&gt;   &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/git-flow/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Certbot 为你的HTTP服务加一层SSL协议</title>
      <link>https://jiangtj.gitlab.io/articles/almond/lets-encrypt-certbot/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/lets-encrypt-certbot/</guid>
      <pubDate>Thu, 26 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;谷歌Chrome安全产品经理艾米丽·谢克特（Emily Schechter）发表博文，证实当该公司在7月发布Chrome 68浏览器时，该浏览器将把所有未采用HTTPS（安全套接字层超文本传输协议）加密的网站都标记为“不安全”网站。    &lt;/p&gt;
&lt;p&gt;Chrome作为浏览器界的巨头，做出如此的决定，将极大的推进HTTPS的进程，我们自然也应该跟进，一同建立更安全的网络环境。但一般证书都是较为昂贵的，因此互联网安全研究小组Internet Security Research Group(ISRG)以及Linux基金会等，提供了公益的项目，用于加速HTTPS的发展    &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/lets-encrypt-certbot/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Boot使用GitLab CI自动部署</title>
      <link>https://jiangtj.gitlab.io/articles/almond/spring-boot-autodeploy-with-gitlab/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/spring-boot-autodeploy-with-gitlab/</guid>
      <pubDate>Sun, 22 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;定义场景&quot;&gt;&lt;a href=&quot;#定义场景&quot; class=&quot;headerlink&quot; title=&quot;定义场景&quot;&gt;&lt;/a&gt;定义场景&lt;/h1&gt;&lt;p&gt;spring boot应用在手动部署过程中主要分为两步，打包编译与上传部署（也可能存在测试环境，但由于该项目目前只有我开发，并未写测试用例）。同样的在gitlab-ci文件中也定义相应的两步骤&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;stages:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;deploy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/spring-boot-autodeploy-with-gitlab/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Boot 自动重启脚本</title>
      <link>https://jiangtj.gitlab.io/articles/almond/spring-boot-autorun-with-gitlab/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/spring-boot-autorun-with-gitlab/</guid>
      <pubDate>Thu, 19 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;一个脚本，自动从GitLab上下载jar，同时重启服务。为后续的CI自动部署做准备&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
          
        
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/spring-boot-autorun-with-gitlab/#disqus_thread</comments>
    </item>
    
    <item>
      <title>测试驱动开发(TDD)的实践</title>
      <link>https://jiangtj.gitlab.io/articles/almond/test-driven%20development/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/test-driven%20development/</guid>
      <pubDate>Sat, 14 Apr 2018 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;测试驱动开发(TDD)是一种很好的方法论，虽然在国内并不被重视。但仍然想抽时间写一篇关于测试驱动开发的文档。      &lt;/p&gt;
&lt;p&gt;OK,最好的描述方式应该分为三部分吧，是什么？为什么？怎么做？那么就从这三部分，分别的描述测试驱动开发方法论。 &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/test-driven%20development/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MySQL5.7 IN与EXISTS</title>
      <link>https://jiangtj.gitlab.io/articles/almond/mysql-in-and-exists/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/mysql-in-and-exists/</guid>
      <pubDate>Thu, 30 Nov 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;文章中的表参考这里的创建&lt;a href=&quot;http://blog.csdn.net/stevendbaguo/article/details/73467649&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/stevendbaguo/article/details/73467649&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;数据表的创建&quot;&gt;&lt;a href=&quot;#数据表的创建&quot; class=&quot;headerlink&quot; title=&quot;数据表的创建&quot;&gt;&lt;/a&gt;数据表的创建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;制造数据&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;INT&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;`Name`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt;( &lt;span class=&quot;keyword&quot;&gt;ID&lt;/span&gt; ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;INNODB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CHARSET&lt;/span&gt; utf8;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/mysql-in-and-exists/#disqus_thread</comments>
    </item>
    
    <item>
      <title>GitLab Pages 搭建Hexo教程</title>
      <link>https://jiangtj.gitlab.io/articles/almond/gitlab-pages-for-hexo/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/gitlab-pages-for-hexo/</guid>
      <pubDate>Tue, 10 Oct 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;大部分情况下，都是github pages与hexo组合搭建静态博客。但不可否认的是，这样存在一些问题。比如，每次文章写完都需要要编译，才能上传，如果我仅仅想写个博客，这样的操作显得繁琐。又比如，你拥有多台电脑的情况，你需要在每台电脑上都配置一样的环境。    &lt;/p&gt;
&lt;p&gt;所以通过持续集成CI/CD的方式，让编译自动化，是一种很不错的解决方案。这里将介绍gitlab-ci来简化环境的搭建与编译过程。当然静态资源将托管在gitlab-pages上。   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is also a tutorial in English&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/gitlab-pages-for-hexo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Dart之环境搭建</title>
      <link>https://jiangtj.gitlab.io/articles/almond/dart-get-start/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/dart-get-start/</guid>
      <pubDate>Sat, 07 Oct 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Dart 是一种易学习、易扩展、跨平台的编程语言。   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易学习：语法感觉很熟悉，语义是干净和一致的。是Java与Javascript的结合体。&lt;/li&gt;
&lt;li&gt;易扩展：仅谷歌就有超过200万行的生产Dart代码。应用程序可以达到数十万行代码。&lt;/li&gt;
&lt;li&gt;跨平台：Dart可以在每一个现代浏览器、命令行、服务器和移动设备上快速运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google 在大型项目中部署使用 Dart。例如，下一代的AdWords (谷歌最重要的赚钱应用)运行在Dart上。   &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/dart-get-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java ProjectReactor框架之Flux篇</title>
      <link>https://jiangtj.gitlab.io/articles/almond/Java%20ProjectReactor-Flux/</link>
      <guid>https://jiangtj.gitlab.io/articles/almond/Java%20ProjectReactor-Flux/</guid>
      <pubDate>Sat, 16 Sep 2017 16:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Spring5现处在第四个预发布版，正式版将要发布了，它带来的一大特性就是响应式框架Spring WebFlux。默认使用ProjectReactor框架。因此。本文通过ProjectReactor中的Flux，来学习使用该框架，以及了解其传递的思想。   &lt;/p&gt;
&lt;p&gt;本文基于Reactor3.1 rc1    &lt;/p&gt;
&lt;p&gt;Reactor官方地址&lt;a href=&quot;http://projectreactor.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://projectreactor.io/&lt;/a&gt;，官方文档写的十分详细，如果您有不错的英文能力，建议直接阅读官方文档。  &lt;/p&gt;
      
      </description>
      
      <comments>https://jiangtj.gitlab.io/articles/almond/Java%20ProjectReactor-Flux/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
