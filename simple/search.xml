<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Restdoc与Docsify,更简单的生成Api文档</title>
      <link href="/simple/2018/12/09/almond/restdoc-and-docsify/"/>
      <url>/simple/2018/12/09/almond/restdoc-and-docsify/</url>
      
        <content type="html"><![CDATA[<p>大半年前就写过一篇文章<a href="https://jiangtj.gitlab.io/articles/almond/test-driven development/">《测试驱动开发(TDD)的实践》</a>，关于测试的。时至今日，我仍然坚信测试是软件开发一重要环节，它在绝大多数情况下，保障了系统的质量与稳定性。   </p><p>但当时所搭的框架存在一些不足，当然主要是由于Asciidoctor。这是一个足够完善的标记语言，但也足够复杂。然而大多数情况下我们并不需要这些语法，Markdown正好足够。    </p><p>事实上，当时我最先尝试的也是Markdown，使用Spring Restdoc中推荐的Slate方案，来解决Markdown无法包含问题。缺点是它运行使用的Ruby，与我所学的完全不同（Java、Js）。但最近看到了另一个文档工具Docsify，它也添加了包含功能，它足够简单，以至于看几遍例子就完全学会，虽然也有缺点，SEO方面，但内部接口文档，你会在乎这个么？下面是一个例子整合Restdoc与Docsify</p><a id="more"></a><h1 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h1><p>首先，创建一个简单的Spring Boot服务，以及暴露一个用户接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestdocDocsifyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RestdocDocsifyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Server is running!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"Jone"</span>,<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="创建测试用例"><a href="#创建测试用例" class="headerlink" title="创建测试用例"></a>创建测试用例</h1><p>这个测试用例是集成测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="meta">@AutoConfigureWebTestClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestdocDocsifyApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WebTestClient webTestClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.webTestClient.get().uri(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                .exchange()</span><br><span class="line">                .expectStatus().isOk()</span><br><span class="line">                .expectBody(String.class)</span><br><span class="line">                .isEqualTo(<span class="string">"Server is running!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.webTestClient.get().uri(<span class="string">"/user"</span>).accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                .exchange()</span><br><span class="line">                .expectStatus().isOk()</span><br><span class="line">                .expectBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="整合Restdoc"><a href="#整合Restdoc" class="headerlink" title="整合Restdoc"></a>整合Restdoc</h1><ol><li>添加自动配置注解<code>@AutoConfigureRestDocs</code></li><li>为每个WebTestClient添加文档参数说明<code>.consumeWith(document())</code><br>整合之后的结果如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="meta">@AutoConfigureWebTestClient</span></span><br><span class="line"><span class="meta">@AutoConfigureRestDocs</span>(outputDir = <span class="string">"docs/snippets"</span>)</span><br><span class="line"><span class="meta">@Import</span>(CustomRestDocsConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestdocDocsifyApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WebTestClient webTestClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.webTestClient.get().uri(<span class="string">"/user"</span>).accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                .exchange()</span><br><span class="line">                .expectStatus().isOk()</span><br><span class="line">                .expectBody()</span><br><span class="line">                .consumeWith(document(<span class="string">"user"</span>,responseFields(</span><br><span class="line">                        fieldWithPath(<span class="string">"name"</span>).description(<span class="string">"The user's name"</span>),</span><br><span class="line">                        fieldWithPath(<span class="string">"sex"</span>).description(<span class="string">"The user's sex"</span>),</span><br><span class="line">                        fieldWithPath(<span class="string">"age"</span>).description(<span class="string">"The user's age"</span>))</span><br><span class="line">                ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>outputDir</code>定义输出目录，指向Docsify文档目录，方便部署（注意添加Git忽略配置），<code>@Import(CustomRestDocsConfiguration.class)</code>导入自定义配置，目的是修改模板为Markdown，代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRestDocsConfiguration</span> <span class="keyword">implements</span> <span class="title">RestDocsWebTestClientConfigurationCustomizer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(WebTestClientRestDocumentationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.snippets().withTemplateFormat(TemplateFormats.markdown());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="创建Docsify文件"><a href="#创建Docsify文件" class="headerlink" title="创建Docsify文件"></a>创建Docsify文件</h1><p>Docsify的一些入门，可以查看<a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">官网</a>，这里已经当你会基本的操作了。首先创建一个<code>index.html</code>，您可以使用命令行生成，或者直接Copy下面的代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring-Cloud Docs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"Description"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/lib/themes/vue.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    window.$docsify = &#123;</span></span><br><span class="line"><span class="undefined">        name: 'Restdoc-Docsify Examples',</span></span><br><span class="line"><span class="undefined">        repo: 'JiangTJ/restdoc-docsify',</span></span><br><span class="line"><span class="undefined">        loadSidebar: true,</span></span><br><span class="line"><span class="undefined">        autoHeader: true,</span></span><br><span class="line"><span class="undefined">        auto2top: true,</span></span><br><span class="line"><span class="undefined">        subMaxLevel: 2</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/docsify/lib/docsify.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/docsify/lib/plugins/search.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/prismjs/components/prism-java.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/prismjs/components/prism-bash.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/prismjs/components/prism-http.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>你可以调整<code>window.$docsify</code>参数，这里将<code>loadSidebar</code>置为了<code>true</code>，为的是每个需求服务分在不同的文件里<br>同样的需要为其添加主页<code>README.md</code>和侧边栏<code>_sidebar.md</code>  </p><ul><li><p>README.md</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Welcome Page</span></span><br><span class="line"></span><br><span class="line"><span class="section">## How to use</span></span><br><span class="line">mvn test</span><br><span class="line">docsify serve docs</span><br><span class="line">browse <span class="code">`localhost:3000`</span>   </span><br><span class="line">click sidebar <span class="code">`User Api`</span></span><br></pre></td></tr></table></figure></li><li><p>_sidebar.md</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>[<span class="string">User Api</span>](<span class="link">user.md</span>)</span><br></pre></td></tr></table></figure></li></ul><p>编写一个用户服务，使用文档嵌入，将代码片段包括进去</p><ul><li>user.md<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### curl-request</span></span><br><span class="line">[<span class="string">curl-request</span>](<span class="link">snippets/user/curl-request.md ':include'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### http-request</span></span><br><span class="line">[<span class="string">http-request</span>](<span class="link">snippets/user/http-request.md ':include'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### http-response</span></span><br><span class="line">[<span class="string">http-response</span>](<span class="link">snippets/user/http-response.md ':include'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### httpie-request</span></span><br><span class="line">[<span class="string">httpie-request</span>](<span class="link">snippets/user/httpie-request.md ':include'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### request-body</span></span><br><span class="line">[<span class="string">request-body</span>](<span class="link">snippets/user/request-body.md ':include'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### response-body</span></span><br><span class="line">[<span class="string">response-body</span>](<span class="link">snippets/user/response-body.md ':include'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### response-fields</span></span><br><span class="line">[<span class="string">response-fields</span>](<span class="link">snippets/user/response-fields.md ':include'</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><ol><li>运行maven测试<code>mvn test</code>生成代码片段   </li><li>执行命令行<code>docsify serve docs</code>，浏览器打开<code>localhost:3000</code>就可以预览刚才编写的文档了(事实上该命令只是将docs下的文件直接放置在web服务器中，如果使用CI可以很方便的部署该文档服务)</li></ol><h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><p>Docsify足够简单，Restdoc在测试阶段生成文档的方式既校验了代码，又校验文档，这种方式还有什么不足呢？在以下两方面</p><ul><li>无法很好的生成pdf文件</li><li>Mock接口</li></ul><p>如果你所在的公司非常“传统”，对于doc或者pdf之类的文件很执着，那Asciidoctor更适合您，多学一门语言而已，但Asciidoctor生成的pdf是真的漂亮。另外一个Mock接口，是为了在完成前，前端可以直接调用Mock接口进行调试，这是一个很好的实践，具体如何做到，你可以尝试一下，方式应该是多种多样的</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/JiangTJ/restdoc-docsify" target="_blank" rel="noopener">该文档的例子工程</a></li><li><a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-testing" target="_blank" rel="noopener">Spring Boot文档</a></li><li><a href="https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/" target="_blank" rel="noopener">Spring Restdoc文档</a></li><li><a href="https://docsify.js.org/#/" target="_blank" rel="noopener">Docsify文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微服务设计 - 版本控制</title>
      <link href="/simple/2018/11/09/almond/microservices-version-control/"/>
      <url>/simple/2018/11/09/almond/microservices-version-control/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在微服务中，单个服务的升级改善是不可避免的，虽然改动最终引起Rest接口变动并不多，但仍然会出现。在《微服务设计》中，提供了两种处理方案：</p><ol><li>不同的接口共存</li><li>同时运行多个版本服务</li></ol><p>这本书的作者Sam Newman，他认为这两种方案都是可行的，但更倾向于不同接口共存。也提出了三点主要原因</p><ul><li>当出现问题时，不同的接口共存可以更快的修改新老版本的代码并一同部署，而另一种就比较麻烦了</li><li>方案二维护困难，同时存在多个版本服务，对运维来说具有较大的挑战性</li><li>持久化层可能是一样的，方案二却有不同版本的实现，会导致潜在的复杂性</li></ul><p>但我更倾向于方案二，该方案的实际使用者主要是Netflix（Spring Cloud便是基于他开源的微服务框架研发的），在现阶段（2018年）相对于作者的年代（2015年），技术上已经有了较大的变化。微服务的设计已经在很多公司大规模的推行及使用，变得更加成熟。作者所提出的前两点问题已经有了比较好的方案减少影响    </p><a id="more"></a><h1 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h1><p>首先，同时需要修改两服务的情况应当只有问题修复，新功能迭代，应发生在新服务上，老版本不应该支持（从某种程度上来说，可以启到督促用户升级）    </p><p>那么问题如何修复呢？同样也存在多种情况，我们拿书中的例子（用户服务）接着讲    </p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>用户服务负责的是用户相关的功能，其中一种情况是做了改进，增强部分功能。例如原本用户创建接口只是简单的用户名与单邮箱绑定（v1），改版后，需要实现的是多邮箱的绑定（v2），事情一个用户多个邮箱是比较常见的    </p><p>那么在这种情况下，底层的持久层已经改变了，原本应该用户表中存在邮箱字段，而新方案则为用户表与用户邮箱绑定表。我们需要在老节点拉出分支<code>release-v1</code>用于维护与兼容老版本，同时在<code>master</code>上迭代新的改进，稳定后拉出<code>release-v2</code>，不同的版本的服务与具体的分支对应，同样的可以创建<code>release-v3</code>等，但不建议同时维护多个版本，即便在不同的接口共存方案里也是一样的    </p><p>有了这些分支后，我们所做的修复都只需要在<code>master</code>上修复，通过<code>git cherry-pick</code>拉取单次提交至不同版本上，这是<code>GitLab Flow</code>方案，他所提倡的上游原则，在很大程度上避免了修改问题所造成的影响</p><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>这里说的重构是指代码的重写，可能用了不同的技术架构或者语音，那么在这种情况下，不同的接口共存方案将无法处理，因为您的服务发生了彻底的变化</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>问题修复后的部署也是难点，如果保证准确部署呢，CI/CD在很大程度上解决了这个问题，许多CI工具都提供指定分支的脚本配置，没错，我们可以提供一样的CI配置文件，保证编译测试一致的前提下，在不同的分支中运行不同的部署脚本</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>运行时，如何将用户指向不同服务，同样的可以通过uri定位如<code>/v1/*</code>，微服务中网关与注册中心特别重要，我们可以在服务名中硬编码版本，比如<code>user-v1</code>这是第一个版本，在Spring Cloud中配置可以是：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">        - id:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">lb://user-v1</span></span><br><span class="line"><span class="attr">          predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/v1/user/**</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line">            <span class="comment"># Strip first path，such v1</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure></p><p>这并不困难</p><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>这个问题是唯一无法避免的，当然不同的接口共存也同样会遇到这个问题。作者认为旧接口转换处理后重新指向新接口服务，来避免持久化问题。这样的方案能解决的，在多服务中也很好解决，往往数据库中字段添加默认值就够了。其他无法兼容的，那么旧接口转换后访问新街口能不出错？唯一的措施是尽快推进升级    </p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>不同的接口共存就不存在问题么，显然不是的。每次新版本的发布，需要对所有接口重写，即使接口定义没有变化。这在很大程度上导致代码的冗余    </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《微服务设计》 Sam Newman 著 崔力强 张俊 译</li><li><a href="https://docs.gitlab.com/ee/university/training/gitlab_flow.html" target="_blank" rel="noopener">GitLab Flow</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Version Control </tag>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单、高效的管理hexo站点主题</title>
      <link href="/simple/2018/10/14/almond/hexo-theme-manage/"/>
      <url>/simple/2018/10/14/almond/hexo-theme-manage/</url>
      
        <content type="html"><![CDATA[<p>如果您和我一样，喜欢更新至最新的主题，那么您也应该遇到和我一样的烦恼。每次更新新的主题时，总是要重新配置，而且随着自定义的内容增多，更新就成了负担。<br>因此，引入了Fork与Submodules来实现以下目标</p><ol><li>自动合并自定义内容与配置</li><li>校验更新操作是否正常工作</li></ol><blockquote><p>如果您不了解如何使用hexo搭建博客，您可以参考这篇博客：<a href="https://jiangtj.gitlab.io/articles/almond/gitlab-pages-for-hexo/">https://jiangtj.gitlab.io/articles/almond/gitlab-pages-for-hexo/</a></p></blockquote><a id="more"></a><h1 id="GitHub-Fork"><a href="#GitHub-Fork" class="headerlink" title="GitHub Fork"></a>GitHub Fork</h1><p>Fork，一般用在贡献开源项目时（这里由于需要对主题配置做修改）。  </p><ol><li>找到您喜欢的主题的开源项目，并点击fork，派生该项目至您自己的远程仓库<br><img src="https://upload-images.jianshu.io/upload_images/2360355-f174e793318476af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub Fork"></li><li>创建新的分支例如custom，并在新分支上调整您的配置</li></ol><p>完成上述步骤后，以后每次合并新的功能仅仅是将主题的改动合并到自己的远程仓库，然后合并到分支上即可。避免了每次做同样的修改操作</p><h1 id="Git-Submodules"><a href="#Git-Submodules" class="headerlink" title="Git Submodules"></a>Git Submodules</h1><p>通过fork，我们得到了想要的主题，但如何使用呢？通常的做法是下载主题到hexo博客项目中，测试并部署。然后，Git合并并不能保证永远完美的工作，如果出现问题，就需要修改主题项目，重新下载放入hexo工程，在运行测试。这过程是复杂的<br>事实上，Git已经针对这种依赖另一个独立的Git仓库情况作了调整，来解决复杂项目管理问题，而这种方式是Submodules子模块    </p><blockquote><p>Git 通过子模块来解决这个问题。 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。  —ProGit(中文版)    </p></blockquote><ol><li><p>添加您的子模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;remote-url&gt; &lt;<span class="built_in">local</span>-path&gt;</span><br></pre></td></tr></table></figure></li><li><p>进去您的字模块，切换到自定义分支，其他操作，就像普通的Git项目一样  </p></li></ol><p>如果您使用vs code，那么在侧边栏Git里，可以很方便的可视化管理子模块<br><img src="https://upload-images.jianshu.io/upload_images/2360355-c30f56ee049cbddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vs code"></p><p>这样之后，您的更新操作，也变得足够简单，基本自定义的配置错了，也可以直接对子模块做修改并提交</p><h1 id="GitLab-CI"><a href="#GitLab-CI" class="headerlink" title="GitLab CI"></a>GitLab CI</h1><p>在gitlab ci中需要针对子模块做额外的配置，将<code>GIT_SUBMODULE_STRATEGY</code>变量改为<code>normal</code>或者<code>recursive</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="attr">  GIT_SUBMODULE_STRATEGY:</span> <span class="string">recursive</span></span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://git-scm.com/book/zh/v2/GitHub-%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%81%9A%E5%87%BA%E8%B4%A1%E7%8C%AE" target="_blank" rel="noopener">GitHub - 对项目做出贡献</a></li><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git 工具 - 子模块</a></li><li><a href="https://docs.gitlab.com/ee/ci/git_submodules.html#using-git-submodules-in-your-ci-jobs" target="_blank" rel="noopener">Using Git submodules with GitLab CI</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 之 Feign （Finchley版）</title>
      <link href="/simple/2018/07/31/almond/f-open-feign/"/>
      <url>/simple/2018/07/31/almond/f-open-feign/</url>
      
        <content type="html"><![CDATA[<p>Feign是轻量级、声明式的Http请求客户端，它吸收了来自的Retrofit JAXRS-2.0和WebSocket的灵感，为了使写Http请求变得更容易而诞生    </p><p>Feign一开始作为Eureka的子项目，用于简化Http请求。但由于其不断完善，目前作为一个轻量级、声明式的Http请求客户端项目，独立维护。在Spring Cloud中，其引入了Feign，并提供了一系列默认的配置与Spring MVC注解的支持。因此，Feign一直被作为首先的Http请求客户端。   </p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>需要Eureka Server，这部分看之前的文档部署，这篇以及以后的文章不在多提</p><p>搭建基础的Eureka Client，给Feign Clinet调用    </p><h2 id="引入web相关依赖"><a href="#引入web相关依赖" class="headerlink" title="引入web相关依赖"></a>引入web相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为了方便引入了lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写Curl-Controller"><a href="#编写Curl-Controller" class="headerlink" title="编写Curl Controller"></a>编写Curl Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurlController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/curl/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">get</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(id).map(item -&gt; <span class="string">"Your id is "</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/curl"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">get</span><span class="params">(@RequestParam MultiValueMap&lt;String,String&gt; queryParams)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(queryParams).map(item -&gt; <span class="string">"Your QueryParams is "</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/curl"</span>)</span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.CREATED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">post</span><span class="params">(@RequestBody Mono&lt;User&gt; user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.map(CurlController::toJson).map(item -&gt; <span class="string">"Your Body is "</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/curl"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">put</span><span class="params">(@RequestBody Mono&lt;User&gt; user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> post(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/curl"</span>)</span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.NO_CONTENT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper <span class="title">getObjectMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (objectMapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = getObjectMapper();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurlControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebTestClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client = WebTestClient.bindToApplicationContext(context).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        client.get().uri(<span class="string">"/curl/1"</span>)</span><br><span class="line">                .exchange()</span><br><span class="line">                .expectStatus().isOk()</span><br><span class="line">                .expectBody(String.class).isEqualTo(<span class="string">"Your id is 1"</span>);</span><br><span class="line"></span><br><span class="line">        client.get().uri(<span class="string">"/curl?name=Jone Test"</span>)</span><br><span class="line">                .exchange()</span><br><span class="line">                .expectStatus().isOk()</span><br><span class="line">                .expectBody(String.class).isEqualTo(<span class="string">"Your QueryParams is &#123;name=[Jone Test]&#125;"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.post().uri(<span class="string">"/curl"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .syncBody(User.of(<span class="string">"Jone Po"</span>,<span class="number">25</span>,<span class="number">1</span>))</span><br><span class="line">                .exchange()</span><br><span class="line">                .expectStatus().isCreated()</span><br><span class="line">                .expectBody(String.class).isEqualTo(<span class="string">"Your Body is &#123;\"name\":\"Jone Po\",\"age\":25,\"sex\":1&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.put().uri(<span class="string">"/curl"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .syncBody(User.of(<span class="string">"Jone Po"</span>,<span class="number">25</span>,<span class="number">1</span>))</span><br><span class="line">                .exchange()</span><br><span class="line">                .expectStatus().isOk()</span><br><span class="line">                .expectBody(String.class).isEqualTo(<span class="string">"Your Body is &#123;\"name\":\"Jone Po\",\"age\":25,\"sex\":1&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client.delete().uri(<span class="string">"/curl"</span>).exchange().expectStatus().isNoContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.204 s &lt;&lt;&lt; FAILURE! - in com.jtj.cloud.baseclient.CurlControllerTest</span><br><span class="line">[ERROR] delete(com.jtj.cloud.baseclient.CurlControllerTest)  Time elapsed: 0.077 s  &lt;&lt;&lt; FAILURE!</span><br></pre></td></tr></table></figure><p>测试接口如预期，成功3个，失败1个（删除接口）    </p><h1 id="Feign服务"><a href="#Feign服务" class="headerlink" title="Feign服务"></a>Feign服务</h1><h2 id="相对于基础的客户端，多引入Feign依赖，并启用Feign"><a href="#相对于基础的客户端，多引入Feign依赖，并启用Feign" class="headerlink" title="相对于基础的客户端，多引入Feign依赖，并启用Feign"></a>相对于基础的客户端，多引入Feign依赖，并启用Feign</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写声明式的Feign接口"><a href="#编写声明式的Feign接口" class="headerlink" title="编写声明式的Feign接口"></a>编写声明式的Feign接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"base-client"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getBaseClientData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/curl/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/curl"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getUser</span><span class="params">(@RequestParam Map&lt;String,String&gt; query)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/curl"</span>)</span><br><span class="line">    <span class="function">String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/curl"</span>)</span><br><span class="line">    <span class="function">String <span class="title">putUser</span><span class="params">(@RequestBody User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/curl"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口注解与Spring MVC的基本一致（@PathVariable不能省略value值）<br>其中@FeignClient定义该接口实例化为Feign服务并注入到Spring中，由Spring管理，value值为配置文件中微服务的名称（spring.application.name的值）   </p><h2 id="调用Feign服务"><a href="#调用Feign服务" class="headerlink" title="调用Feign服务"></a>调用Feign服务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> BaseClient baseClient;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/base/curl"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title">getBaseClientCurl</span><span class="params">()</span></span>&#123;</span><br><span class="line">Map&lt;String,String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">result.put(<span class="string">"ID 1"</span>,baseClient.getUser(<span class="number">1L</span>));</span><br><span class="line">Map&lt;String,String&gt; query = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">query.put(<span class="string">"name"</span>,<span class="string">"Jone Taki"</span>);</span><br><span class="line">result.put(<span class="string">"Query Jone"</span>,baseClient.getUser(query));</span><br><span class="line"></span><br><span class="line">result.put(<span class="string">"Post"</span>,baseClient.postUser(User.of(<span class="string">"Jone Tiki"</span>,<span class="number">20</span>,<span class="number">1</span>)));</span><br><span class="line">result.put(<span class="string">"Put"</span>,baseClient.postUser(User.of(<span class="string">"Jone Kolo"</span>,<span class="number">30</span>,<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">baseClient.deleteUser();</span><br><span class="line">result.put(<span class="string">"Delete"</span>,<span class="string">"success"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">result.put(<span class="string">"Delete"</span>,<span class="string">"fail: "</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问接口测试"><a href="#访问接口测试" class="headerlink" title="访问接口测试"></a>访问接口测试</h2><p>我们能得到如下结果，其中Delete是失败的<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Delete"</span>:<span class="string">"fail: BaseClient#deleteUser() failed and no fallback available."</span>,</span><br><span class="line">    <span class="attr">"Query Jone"</span>:<span class="string">"Your QueryParams is &#123;name=[Jone Taki]&#125;"</span>,</span><br><span class="line">    <span class="attr">"Post"</span>:<span class="string">"Your Body is &#123;\"name\":\"Jone Tiki\",\"age\":20,\"sex\":1&#125;"</span>,</span><br><span class="line">    <span class="attr">"ID 1"</span>:<span class="string">"Your id is 1"</span>,</span><br><span class="line">    <span class="attr">"Put"</span>:<span class="string">"Your Body is &#123;\"name\":\"Jone Kolo\",\"age\":30,\"sex\":1&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述这些例子包含了基本的REST操作，也就是Feign的基本使用</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">Feign源码地址</a></li><li><a href="http://cloud.spring.io/spring-cloud-openfeign/single/spring-cloud-openfeign.html" target="_blank" rel="noopener">Spring Cloud OpenFeign 官方文档</a></li><li><a href="https://github.com/JiangTJ/spring-cloud-examples/tree/master/simple-example" target="_blank" rel="noopener">例子源码地址（可能存在改动和完善）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud 之 Eureka （Finchley版）</title>
      <link href="/simple/2018/07/24/almond/f-eureka-server/"/>
      <url>/simple/2018/07/24/almond/f-eureka-server/</url>
      
        <content type="html"><![CDATA[<p>在微服务架构中，服务发现是最重要的一环。Spring Cloud提供多个服务注册中心作为选择，如Eureka、Consul、Zookeeper等，当然最常用的是Eureka</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Eureka由Eureka Server与Eureka Client两部分组成<br>Eureka Server是高可用的（可同时作为客户端向其他注册中心注册）服务发现的注册中心，为每个客户端（Eureka Client）提供注册服务，并提供已注册服务信息<br>Eureka Client向服务注册中心注册，并提供断路、负载均衡等功能    </p><a id="more"></a><h1 id="简单的Eureka-Server"><a href="#简单的Eureka-Server" class="headerlink" title="简单的Eureka Server"></a>简单的Eureka Server</h1><p>启动一个Eureka Server，首先需要添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其次，在启动类Application类中添加Eureka Server相关的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServer.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们启动一个简单的注册中心，需要禁用Eureka Server的客户端行为（这是默认方式，为了保证注册中心的高可用），添加以下的配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p><code>enable-self-preservation: false</code>是关闭自我保护，自我保护是为了保障微服务（实际可用）与Eureka Server之间由于网络因数无法通信时，在一段时间内保留微服务，避免微服务被注销而无法提供服务的情况，由于测试环境实例过少，开启会导致难以测试，一般线上需要开启（默认）<br><code>registerWithEureka</code>与<code>fetchRegistry</code>，用于禁用客户端行为，Eureka Server作为单个独立应用运行    </p><h1 id="分布式的Eureka-Server"><a href="#分布式的Eureka-Server" class="headerlink" title="分布式的Eureka Server"></a>分布式的Eureka Server</h1><p>单个Eureka Server，在大部分场景下是足够的，但当企业微服务规模扩大，单个服务难以支撑时，分布式是不可避免的，Eureka Server作为高可用的注册中心，在最初设计时就考虑了相关问题，即它作为服务注册中心的同时，它也能作为客户端，向其他注册中心发起注册<br>官方以及许多其他地方的文档基本都是两个对等Eureka Server配置，但事实上，也有需要多个对等的配置。<br>多个对等配置如下   </p><ol><li><p>实例一    </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:9001/eureka/,http://localhost:9002/eureka/</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>实例二  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/,http://localhost:9002/eureka/</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>实例三   </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9002</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:9001/eureka/,http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><p>这里有一点需要注意，就是将<strong>所有的Eureka Server填写在<code>defaultZone</code>中</strong>，并以逗号隔开，自身的地址可填，也可不填，<code>registerWithEureka</code>配置了自我注册，默认是开启的。因为服务注册中心同步注册服务，需要彼此之间相互注册，例如A与B相互注册，B与C相互注册，如果一个客户端在A上注册，那么它能在B中发现，而不会在C中发现，如果需要在C中同样发现，那么必须A与C相互注册    </p><h1 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h1><p>客户端是微服务的一个基础，用于向服务注册中心发起注册，当然如果存在多个注册中心的情况，填写一个就好，注册中心之间会相互同步注册的服务信息<br>首先需要引入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其次，在启动类Application类中添加Eureka Client相关的注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//或者@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">//或者@SpringCloudApplication 需要添加断路器依赖（之后会讲这块）</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServer.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后添加以下的配置，其实Eureka Server包含客户端的内容，这里的配置与上面一致<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p><p><em>默认情况下<code>defaultZone</code>的值为<code>http://localhost:8761/eureka/</code></em></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot Relaxed Binding 2.0</title>
      <link href="/simple/2018/07/11/almond/spring-boot-relaxed-binding-2.0/"/>
      <url>/simple/2018/07/11/almond/spring-boot-relaxed-binding-2.0/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot 中的配置绑定一直是其最主要的特性。而在Spring Boot 2.0中，该绑定方式做了大量的修改，并且借机制定一些新的规范，以减少过于宽松的绑定规则导致的一些问题</p><blockquote><p>您也可以通过官方的<a href="https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0" target="_blank" rel="noopener">Relaxed-Binding-2.0 wiki</a>了解详细</p></blockquote><a id="more"></a><h1 id="设置配置属性"><a href="#设置配置属性" class="headerlink" title="设置配置属性"></a>设置配置属性</h1><h2 id="简单的类型"><a href="#简单的类型" class="headerlink" title="简单的类型"></a>简单的类型</h2><p>配置文件中的简单类型，都会被移除特殊字符并转为小写后，进行绑定。例如下面的几个配置都等价于<code>spring.jpa.databaseplatform=mysql</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.database-platform=mysql</span><br><span class="line">spring.jpa.databasePlatform=mysql</span><br><span class="line">spring.JPA.database_platform=mysql</span><br></pre></td></tr></table></figure></p><blockquote><p>当然，推荐的是kebab-case命名，也是上面例子中的<code>spring.jpa.database-platform=mysql</code></p></blockquote><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>List类型的属性，在配置文件中需要使用<code>[ ]</code>标记符:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.my-example.url[0]=http://example.com</span><br><span class="line">spring.my-example.url[1]=http://spring.io</span><br></pre></td></tr></table></figure></p><p>或者yml的标准写法<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  my-example:</span></span><br><span class="line"><span class="attr">    url:</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//example.com</span></span><br><span class="line"><span class="attr">      - http:</span><span class="string">//spring.io</span></span><br></pre></td></tr></table></figure></p><p>同时，还支持使用逗号分割成数组，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.my-example.urls=http://example.com,http://spring.io</span><br></pre></td></tr></table></figure></p><p>注意：在properties，如果遗漏中间的索引，会导致无法绑定异常，下面是不被允许的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo[0] = a</span><br><span class="line">foo[2] = b</span><br></pre></td></tr></table></figure></p><h2 id="Map-类型"><a href="#Map-类型" class="headerlink" title="Map 类型"></a>Map 类型</h2><p>Map类型标准格式很简单<code>my-example.key=value</code>，yml类似的，但当遇到特殊字符时，就需要特别处理，但官方文档上讲的，不是很清楚，所以写了几个例子做实验   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jwt.test.xx=1</span><br><span class="line">jwt.test.xx-xx=2</span><br><span class="line">jwt.test.XX-xx=3</span><br><span class="line">jwt.test.[ww-ww]=4</span><br><span class="line">jwt.test.&apos;[uuu/w1]&apos;=5</span><br><span class="line">jwt.test.[uuu/w2]=6</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jwt:</span></span><br><span class="line"><span class="attr">  ymltest:</span></span><br><span class="line"><span class="attr">    foo:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    ppp-vvv:</span> <span class="number">2</span></span><br><span class="line">    <span class="string">[scfds-tgro]:</span> <span class="number">3</span></span><br><span class="line">    <span class="string">'[csf-te]'</span><span class="string">:</span> <span class="number">4</span></span><br><span class="line">    <span class="string">'[csf/e]'</span><span class="string">:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="/images/md/others/spring-test-map.png" alt="">    </p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在环境变量中，使用<code>_</code>代替<code>.</code>或者<code>[]</code>，如果<code>_</code>包围的是一数字，就替换为<code>[]</code>，其余情况为<code>.</code>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MY_FOO_1_ = my.foo[1]</span><br><span class="line">MY_FOO_1_BAR = my.foo[1].bar</span><br><span class="line">MY_FOO_1_2_ = my.foo[1][2]</span><br></pre></td></tr></table></figure></p><h1 id="读取配置属性"><a href="#读取配置属性" class="headerlink" title="读取配置属性"></a>读取配置属性</h1><p>如果，你需要从环境中读出属性值到你的app中，你需要使用与配置文件一样规则的名称</p><ul><li>相同的名称</li><li>必须是 (a-z,0-9)字母</li><li>必须是 小写</li><li>唯一允许的特殊字符是<code>[]</code>，用于表示list的索引</li><li>用连接符<code>-</code>分割单词</li><li>不能以数字开头   </li></ul><p>下面是一个从配置文件中读出属性的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.environment.containsProperty(<span class="string">"spring.jpa.database-platform"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>@Value 也需要遵守一样的规则</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Aria2 一个轻量级的命令行下载工具</title>
      <link href="/simple/2018/06/04/almond/aria2-info/"/>
      <url>/simple/2018/06/04/almond/aria2-info/</url>
      
        <content type="html"><![CDATA[<p>aria2 是一个轻量级的、多源、跨平台的命令行下载实用工具。它支持HTTP/HTTPS、FTP、SFTP、BitTorrent和Metalink。<br>我们可以在GitHub上下载最新的<a href="https://github.com/aria2/aria2/releases" target="_blank" rel="noopener">稳定版</a>     </p><a id="more"></a><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>Multi-Connection Download. aria2 can download a file from multiple sources/protocols and tries to utilize your maximum download bandwidth. Really speeds up your download experience.</li><li><p>多线程连接下载，最大限度的利用您的宽带</p></li><li><p>Lightweight. aria2 doesn’t require much memory and CPU time. When disk cache is off, the physical memory usage is typically 4MiB (normal HTTP/FTP downloads) to 9MiB (BitTorrent downloads). CPU usage in BitTorrent with download speed of 2.8MiB/sec is around 6%.</p></li><li><p>轻量级，不需要太多的内存与cpu资源</p></li><li><p>Fully Featured BitTorrent Client. All features you want in BitTorrent client are available: DHT, PEX, Encryption, Magnet URI, Web-Seeding, Selective Downloads, Local Peer Discovery and UDP tracker.</p></li><li><p>支持所有的BitTorrent的客户端特性</p></li><li><p>Metalink Enabled. aria2 supports The Metalink Download Description Format (aka Metalink v4), Metalink version 3 and Metalink/HTTP. Metalink offers the file verification, HTTP/FTP/SFTP/BitTorrent integration and the various configurations for language, location, OS, etc.</p></li><li><p>支持Metalink</p></li><li><p>Remote Control. aria2 supports RPC interface to control the aria2 process. The supported interfaces are JSON-RPC (over HTTP and WebSocket) and XML-RPC.</p></li><li>支持远程控制下载</li></ul><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p><em>建议添加aria2所在目录到系统path中，方便在任意位置使用aria2c命令</em>     </p><ol><li><p>从网上下载文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aria2c http://example.org/mylinux.iso</span><br></pre></td></tr></table></figure></li><li><p>同时下载多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aria2c http://a/f.iso ftp://b/f.iso</span><br></pre></td></tr></table></figure></li><li><p>使用两个连接下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aria2c -x 2 http://a/f.iso</span><br></pre></td></tr></table></figure></li><li><p>使用BitTorrent下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aria2c http://example.org/mylinux.torrent</span><br></pre></td></tr></table></figure></li><li><p>使用BitTorrent Magnet URI下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aria2c <span class="string">'magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C'</span></span><br></pre></td></tr></table></figure></li><li><p>下载文本中的连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aria2c -i uris.txt</span><br></pre></td></tr></table></figure></li><li><p>修改名称与路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aria2c http://example.org/a.txt -o b.txt -d your-dir</span><br></pre></td></tr></table></figure></li></ol><h1 id="UI-框架"><a href="#UI-框架" class="headerlink" title="UI 框架"></a>UI 框架</h1><ul><li><a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener">webui-aria2</a>: 一个网页端的aria2实现</li><li><a href="https://github.com/persepolisdm/persepolis" target="_blank" rel="noopener">persepolis</a>: 一个python写的aria2的客户端</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://aria2.github.io/" target="_blank" rel="noopener">aria2 docs</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JWeb 简单的方式部署静态资源</title>
      <link href="/simple/2018/05/30/almond/jweb-for-static-resource/"/>
      <url>/simple/2018/05/30/almond/jweb-for-static-resource/</url>
      
        <content type="html"><![CDATA[<p>JWeb 是一个基于Spring Boot的简单服务。提供Shell脚本，以简单的方式部署以及运行静态资源</p><h1 id="缘"><a href="#缘" class="headerlink" title="缘"></a>缘</h1><p>某天晚上睡不着，充电。突然脑抽了一下，node能做到命令行快速的运行静态资源，例如<a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">docsify-cli</a>，能通过<code>docsify serve your-static-dir</code>直接部署静态资源，于是我想的是，相似的功能，java也能实现的把    </p><p>直接部署静态资源，在开发过程中是很有必要的，例如测试跨域问题，您必须另外起个服务。如果是下载web服务器，并将资源拖拽过去的方式，就有点麻烦咯</p><a id="more"></a><h1 id="Java服务"><a href="#Java服务" class="headerlink" title="Java服务"></a>Java服务</h1><p>java随着spring boot的出现，开发变得越来越简单，而spring boot正好提供了命令行的方式运行web服务。通过翻阅相关的文档，也发现spring boot中配置文件可以设置本地路径，例如<code>file:/mnt/c/111/</code>设置为c盘111文件夹（win10 bash）。所以java服务是基于spring boot的简单的服务      </p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>您可以在<a href="https://start.spring.io/" target="_blank" rel="noopener">Spring官网</a>上下载基本的骨架，当然也可以通过idea等工具下载。一般来说添加以下依赖就够了，但如果您还有其他需求，例如和spring cloud配合，请引入相关的依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h2 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h2><p>由于spring boot默认需要<code>index.html</code>才能访问静态资源首页，这是我们不希望的，添加一个路径，将<code>/</code>跳转至index.html。如下修改<code>JwebApplication.class</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwebApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(JwebApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，已经完成了java服务的创建，您可以使用命令行<code>java -jar xxx.jar --spring.resources.static-locations=file:your-static-dir</code>来部署您的静态资源了，但，这命令行是不是太长了…</p><h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><p>shell脚本的目的是为了简化命令行而编写的，提供类似docsify-cli一样的命令     </p><p>目前的脚本如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:your_dir</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example: <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/mnt/c/Users/MrTT/IdeaProjects/jweb/scripts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要openJDK</span></span><br><span class="line">if ! hash java 2&gt;/dev/null; then</span><br><span class="line">  echo "I require java but it's not installed. Please install openJDK.";</span><br><span class="line">  exit 1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取脚本路径</span></span><br><span class="line">script_path=`dirname $0`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修复环境</span></span><br><span class="line">if [ ! -e $&#123;script_path&#125;"/jweb.jar" ]; then</span><br><span class="line">  echo "Downloading jar ...";</span><br><span class="line">  wget -O jweb.jar "https://gitlab.com/jiangtj/jweb/-/jobs/artifacts/release/raw/target/jweb.jar?job=build-release"</span><br><span class="line">  mv jweb.jar $&#123;script_path&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> java_command</span></span><br><span class="line">java_command="java -jar "$&#123;script_path&#125;"/jweb.jar"</span><br><span class="line"></span><br><span class="line">while getopts "c:p:w:" opt; do</span><br><span class="line">  case $&#123;opt&#125; in</span><br><span class="line">    c)</span><br><span class="line">      config_dir=`readlink -f $OPTARG`</span><br><span class="line">      java_command=$&#123;java_command&#125;" --spring.config.additional-location=file:"$&#123;config_dir&#125;</span><br><span class="line">      ;;</span><br><span class="line">    p)</span><br><span class="line">      java_command=$&#123;java_command&#125;" --server.port="$OPTARG</span><br><span class="line">      ;;</span><br><span class="line">    w)</span><br><span class="line">      static_dir=`readlink -f $OPTARG`</span><br><span class="line">      java_command=$&#123;java_command&#125;" --spring.resources.static-locations=file:"$&#123;static_dir&#125;</span><br><span class="line">      ;;</span><br><span class="line">    \?)</span><br><span class="line">      echo "Please read docs !"</span><br><span class="line">      ;;</span><br><span class="line">  esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">echo $&#123;java_command&#125;</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;java_command&#125;</span></span><br></pre></td></tr></table></figure></p><p>实现几个功能点：    </p><ol><li>判断是否存在java环境</li><li>自动下载基本的java服务（如果不存在的话）</li><li>获取参数，拼接java命令，并执行</li></ol><p>如果，将该shell脚本加载在path路径中，那么可以在任意位置通过命令行<code>jweb.sh -w your-static-dir</code>来部署静态资源    </p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>目前项目处在初步的设计阶段，后续会添加更多的参数，以及对java服务更多定制，以满足更多的情况    </p><p><a href="https://gitlab.com/JiangTJ/jweb" target="_blank" rel="noopener">JWeb·GitLab</a><br><a href="https://github.com/JiangTJ/jweb" target="_blank" rel="noopener">JWeb·GitHub镜像</a><br><a href="https://jiangtj.gitlab.io/jweb">JWeb·Docs</a>    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart与Node对比</title>
      <link href="/simple/2018/05/27/almond/dart-vs-node/"/>
      <url>/simple/2018/05/27/almond/dart-vs-node/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。   </p><h2 id="dart"><a href="#dart" class="headerlink" title="dart"></a>dart</h2><p>Dart是谷歌开发的计算机编程语言，后来被Ecma(ECMA-408)认定为标准。它被用于web、服务器、移动应用和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。<br>Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system。 </p><a id="more"></a>  <p>本篇文章基于node 8.11 与 dart 2.0-dev58   </p><h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><p>对于任意一门语言，在依赖库膨胀的今天，包管理越来越显得重要。例如java的maven以及Swift的SPM(Swift Package Manager)    </p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm是我见过的最简单，粗暴的包管理工具<br>npm会根据package.json查找并下载依赖至本地的node_modules文件夹上，但这种方式导致每个项目都需要下载几乎相同的依赖文件（而且很大），为解决这样的问题，Facebook开发了yarn依赖管理工具，统一下载依赖本件，复制相关文件至对应的项目，以减少下载慢的问题。当然还有其他方案，例如pnpm，他通过链接，将依赖关联到统一位置，以解决网络与空间占用问题<br>npm非常自由，每个用户都能上传与下载任意的js包，但也因此，npm的包也非常的乱，看一下angular官方的例子以及ivew的node_modules大小吧，很难想象，一个不大的项目需要这么大的依赖库<br><img src="/images/md/others/node_modules1.png" alt="">   </p><h2 id="pub"><a href="#pub" class="headerlink" title="pub"></a>pub</h2><p>dart的包管理工具名为pub，他的管理方式类似于pnpm。他会下载依赖至统一的目录下。而每个项目都将关联依赖至该目录<br>目前，dart库中项目大部分来自于谷歌或者谷歌移植的node库，也因此，依赖库相对于node来说小了太多，但必要的库都是有的。<br>谷歌的angular框架也基于dart进行了重新的开发，相对于TypeScript版来说，最显著的是依赖库明显少了好多<br><img src="/images/md/others/pub1.png" alt="">    </p><blockquote><p><strong>Tips</strong></p><ul><li>pub依赖库小于npm，意味着可用的工具类或者插件较少</li><li>pub下载，由于国内环境，需要通过科学方式</li><li>dev版很不稳定，甚至连一些基础的命令都在变</li></ul></blockquote><h1 id="JIT运行"><a href="#JIT运行" class="headerlink" title="JIT运行"></a>JIT运行</h1><p>开发过程，通过JIT即时运行是非常重要的，它在一定程度上影响着开发效率，下面对比了相同的angular例子，编译运行的时间    </p><ol><li><p>node每次的编译都在5s左右<br><img src="/images/md/others/angular-jit-node.png" alt="">    </p></li><li><p>dart仅在在首次会编译运行所需的文件，因此，它表现为首次编译时间十分长(约33s)，而之后的每次，都仅需较短的时间(约2-3s)<br><img src="/images/md/others/angular-jit-dart.png" alt="">    </p></li></ol><h1 id="AOT编译"><a href="#AOT编译" class="headerlink" title="AOT编译"></a>AOT编译</h1><p>部署上线，一般情况下需要AOT编译，以保证客户端的运行效率    </p><ol><li><p>node编译之后的大小在400kb左右，不算大，毕竟对于目前4G网络来说，很快就能下完<br><img src="/images/md/others/angular-aot-node.png" alt="">    </p></li><li><p>dart生成的文件与node差距不大，但其中dart编译成的js名固定为<code>main.dart.js</code>，可能存在缓存问题，期待完善<br><img src="/images/md/others/angular-aot-dart.png" alt="">   </p></li></ol><h1 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h1><p>相对于node来说，dart很不成熟，但我们也能看到它的一些好的特性。怎么说呢，期待dart的完善，也希望node能借鉴其他的语言环境，改善一下不足之处</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TICK Stack 实践之监控服务器</title>
      <link href="/simple/2018/05/20/almond/tick-stack-for-server/"/>
      <url>/simple/2018/05/20/almond/tick-stack-for-server/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.influxdata.com/time-series-platform/" target="_blank" rel="noopener">TICK Stack</a>是由一系列的服务组成的监控分析处理数据的解决方案，一般用于系统监控，或者收集处理与时间紧密相关的数据。    </p><p>它包含了以下服务：   </p><ul><li>Telegraf 是一个插件驱动的代理服务，用于收集并提供系统数据（如CPU、内存等）</li><li>InfluxDB 是一个时序数据库，为满足高负载的读写而开发的数据库</li><li>Chronograf 通过图表可视化分析数据的服务</li><li>Kapacitor 是数据处理服务，用于批处理数据以及必要时提醒用户等</li></ul><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>TICK在官网<a href="https://portal.influxdata.com/downloads" target="_blank" rel="noopener">https://portal.influxdata.com/downloads</a>提供相应的下载安装方式，注意需要翻墙（JQuery引用的是Google源，会导致页面点击无反应）<br>下面是Ubuntu &amp; Debian的安装方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># telegraf</span></span><br><span class="line">wget https://dl.influxdata.com/telegraf/releases/telegraf_1.6.2-1_amd64.deb</span><br><span class="line">sudo dpkg -i telegraf_1.6.2-1_amd64.deb</span><br><span class="line"><span class="comment"># influxdb</span></span><br><span class="line">wget https://dl.influxdata.com/influxdb/releases/influxdb_1.5.2_amd64.deb</span><br><span class="line">sudo dpkg -i influxdb_1.5.2_amd64.deb</span><br><span class="line"><span class="comment"># chronograf</span></span><br><span class="line">wget https://dl.influxdata.com/chronograf/releases/chronograf_1.4.4.2_amd64.deb</span><br><span class="line">sudo dpkg -i chronograf_1.4.4.2_amd64.deb</span><br><span class="line"><span class="comment"># kapacitor</span></span><br><span class="line">wget https://dl.influxdata.com/kapacitor/releases/kapacitor_1.4.1_amd64.deb</span><br><span class="line">sudo dpkg -i kapacitor_1.4.1_amd64.deb</span><br></pre></td></tr></table></figure></p><p>也可以通过添加apt源安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">source</span> /etc/lsb-release</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://repos.influxdata.com/<span class="variable">$&#123;DISTRIB_ID,,&#125;</span> <span class="variable">$&#123;DISTRIB_CODENAME&#125;</span> stable"</span> | sudo tee /etc/apt/sources.list.d/influxdb.list</span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install influxdb</span><br><span class="line">sudo apt-get install telegraf</span><br><span class="line">sudo apt-get install chronograf</span><br><span class="line">sudo apt-get install kapacitor</span><br></pre></td></tr></table></figure></p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>通过linux命令启动相应的服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service telegraf start</span><br><span class="line">sudo service influxd start</span><br><span class="line">sudo service kapacitor start</span><br><span class="line">sudo service chronograf start</span><br></pre></td></tr></table></figure></p><p>默认情况下，访问<a href="http://chronograf-ip:8888" target="_blank" rel="noopener">http://chronograf-ip:8888</a>即可    </p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>一般情况下需要调整配置文件，使服务满足我们的需求，如权限等。<br>可以查看官方相关的文档配置    </p><ul><li><a href="https://docs.influxdata.com/chronograf/v1.4/introduction/getting-started/" target="_blank" rel="noopener">chronograf</a>   </li><li><a href="https://docs.influxdata.com/influxdb/v1.5/" target="_blank" rel="noopener">influxdb</a>    </li></ul><p>目前Chronograf 的权限支持github,google等账号体系，但企业内部使用可能需要重新开发，满足企业内部帐号权限系统  </p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>事实上，监控的功能挺多余的，云服务商一般都为我们提供了不错的监控服务。但influxdb，目前来说最主流的时序数据库，可以用来存储其他一些数据。例如网站的访问量等。再通过chronograf展示数据，在<a href="https://jiangtj.gitlab.io/">我的博客</a>的左侧菜单上有站点数据，就是通过这种方式来实现的，<a href="https://gitlab.com/JiangTJ/jiangtj.gitlab.io/blob/master/source/_data/metric.swig" target="_blank" rel="noopener">我统计用的js脚本可以点这里看</a>。   </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/lin_credible/article/details/60579738" target="_blank" rel="noopener">TICK技术栈 – DevOps轻量级监控解决方案</a>  </li><li><a href="https://www.influxdata.com/time-series-platform/" target="_blank" rel="noopener">Open Source Time Series Platform</a>  </li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TICK Stack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用Jmeter进行压力测试</title>
      <link href="/simple/2018/05/14/almond/jmeter-info/"/>
      <url>/simple/2018/05/14/almond/jmeter-info/</url>
      
        <content type="html"><![CDATA[<p>压力测试（Stress Test），也称为强度测试、负载测试。压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。目前互联网的环境下，压力测试是必不可少的，其中Apache JMeter是目前主流的开源的压力测试工具。</p><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。</p><a id="more"></a><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Jmeter可以在官网<a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">https://jmeter.apache.org/download_jmeter.cgi</a>直接下载编译过的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.shu.edu.cn/apache/jmeter/binaries/apache-jmeter-4.0.zip -O jmeter.zip</span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>下载好后解压，并修改配置文件，使其启动时默认使用中文语言<br>${jmeter-dir}/bin/jmeter.properties 37行左右<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#Preferred GUI language. Comment out to use the JVM default locale&apos;s language.</span><br><span class="line">language=zh_CN</span><br></pre></td></tr></table></figure></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>Windows下双击jmeter.bat启动，Linux或者其他用相应的脚本启动</p><h1 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h1><p>jmeter可以自定义测试计划，比较常用的有线程组（用户组）、线程（用户）、控制器、定时器和监听器等</p><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>一般都需要定义一组用户，用于模拟多用户并发请求<br><img src="https://jiangtj.github.io/assets/img/others/jmeter/u1.png" alt=""><br>如图，定义了500用户，依次在30s内递增<br><img src="https://jiangtj.github.io/assets/img/others/jmeter/u2.png" alt="">   </p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程组内定义工作内容，或者一些通用的环境等<br>例如添加公共的默认请求信息<br><img src="https://jiangtj.github.io/assets/img/others/jmeter/h1.png" alt=""><br>添加一个循环逻辑<br><img src="https://jiangtj.github.io/assets/img/others/jmeter/l.png" alt=""><br>添加一个Http请求<br><img src="https://jiangtj.github.io/assets/img/others/jmeter/q1.png" alt="">   </p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>监听器用于获取执行情况，生成或者计算相应的数据<br>例如添加响应时间的报表<br><img src="https://jiangtj.github.io/assets/img/others/jmeter/r1.png" alt="">  </p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p>编写了一个jmeter脚本对我服务器上的两个web服务进行了压力测试，一个为webmvc，一个为webflux。由于机器的性能实在有限，出现了很多连接超时，但也有惊喜    </p><p>我模拟在30s内启动500个用户请求服务，每个用户请求30次中间间隔随机1-2s</p><h2 id="WebMVC"><a href="#WebMVC" class="headerlink" title="WebMVC"></a>WebMVC</h2><p>webmvc 在并发请求上去后，貌似服务崩了，以至于后面的请求都未完成，我在半个小时后再次访问web服务，仍然无响应。而从结果来看，数据库服务也被挤下去。   </p><p><img src="https://jiangtj.github.io/assets/img/others/jmeter/mvc1.png" alt=""><br><img src="https://jiangtj.github.io/assets/img/others/jmeter/mvc2.png" alt=""><br><img src="https://jiangtj.github.io/assets/img/others/jmeter/mvc3.png" alt="">   </p><h2 id="WebFlux"><a href="#WebFlux" class="headerlink" title="WebFlux"></a>WebFlux</h2><p>webflux 在并发方面带给我一些惊喜，500的并发对于1核1G1M的机器来说，实在的太勉强了（还跑着数据库），测试过程中也出现了较多的连接超时，但是，服务一直保持可用。也查看过CPU，在连接超时的时间，CPU已经被占满。应该是无法处理导致直接不接收相应的请求。这也导致测试完成后，服务一直保持正常，访问返回了正确结果。</p><p><img src="https://jiangtj.github.io/assets/img/others/jmeter/flux1.png" alt=""><br><img src="https://jiangtj.github.io/assets/img/others/jmeter/flux2.png" alt="">   </p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h2><p>jmeter还有许多插件，扩展它所支持的环境，例如MQTT插件<a href="https://github.com/emqtt/mqtt-jmeter" target="_blank" rel="noopener">https://github.com/emqtt/mqtt-jmeter</a>，可用来测试MQTT服务，MQTT服务作为物联网的重要组测部分，能进行压力测试可以做到更好的评估。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jmeter </tag>
            
            <tag> 压力测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git工作流</title>
      <link href="/simple/2018/05/01/almond/git-flow/"/>
      <url>/simple/2018/05/01/almond/git-flow/</url>
      
        <content type="html"><![CDATA[<p>选择Git工作流，和如何配合工作流工作，这是软件行业经常碰到的问题。不同的Leader会有不同方案，有好有坏。当然能应用进实际开发中的流程，只要实际操作人员足够的仔细便不会出现问题，例如最常用的<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Vincent Driessen提出的Git工作流</a>。     </p><p>接下来，将介绍这个Git工作流，以及它所衍生出来的其它不错的工作流（GitHub Flow与GitLab Flow）    </p><p><img src="https://nvie.com/img/git-model@2x.png" alt="">   </p><a id="more"></a><h1 id="Git-Flow-By-Vincent-Driessen"><a href="#Git-Flow-By-Vincent-Driessen" class="headerlink" title="Git Flow By Vincent Driessen"></a>Git Flow By Vincent Driessen</h1><p>如上图，它包含了全部的流程内容，一个由两个主分支develop和master以及三个支持分支hot-fix、feature、release组成的工作流。我们每次功能开发以develop分支为主，从它这里拉出feature分支，当完成时合并回develop，如下图<br><img src="https://nvie.com/img/fb@2x.png" alt="">   </p><p>当开发完成，将develop发布到一release分支上进行测试以及bug修复。测试通过后将release分支的代码合并到master，作为一版本发布<br><img src="https://nvie.com/img/main-branches@2x.png" alt=""></p><p>线上问题，是常见的情况，无论是谁都不可能保证自己的代码不出问题。这时需要从master的tags（一般每次版本发布都需打上tags）中拉出修复分支hot-fix，修复并测试该问题。当完成后，须将此次更新同时合并到master和develop<br><img src="https://nvie.com/img/hotfix-branches@2x.png" alt=""></p><p>Vincent Driessen作为首个Git成功模型的提出者，值得敬佩。后来的许多分支管理流程或多或少都有参照他的设计。    </p><h1 id="简化：GitHub-Flow"><a href="#简化：GitHub-Flow" class="headerlink" title="简化：GitHub Flow"></a>简化：GitHub Flow</h1><p>GitHub Flow也是个‘非常常用’的分支管理流程，一般它只在开源项目中使用。它是个十分轻量的分支管理流程，去掉了诸如hot-fix、release、develop分支，仅仅保留了master与feature，当然这里的feature也可当作hot-fix分支<br><img src="https://jiangtj.github.io/assets/img/others/github-flow.png" alt="">   </p><p>如图，当我们需要进行开发或者修复bug时，我们首先从master拉出一个feature/hot-fix分支，当完成开发，接下来是测试与讨论，并持续改进，当完善后，将该部分代码合并入master。至此，一个功能或者一个Bug修复开发完成了。相对Git Flow，减少了许多分支，可以让开发者更专注于功能的开发，同时也减少了不同分支间切换出错的概率。当然，也导致了分支间的定义不够，如遇到需要版本的情况，该怎么定义版本分支，遇到企业内部的测试环境，又该怎么区分呢？     </p><h1 id="演进：GitLab-Flow"><a href="#演进：GitLab-Flow" class="headerlink" title="演进：GitLab Flow"></a>演进：GitLab Flow</h1><p>GitLab Flow是基于GitHub Flow提出的，它的目的是为了解决上述企业中可能遇到的问题，同时保持足够的简化。GitLab Flow在实施过程中，十分重视上游优先的原则。一般情况下，只允许将上游的分支的代码部署到下游。</p><h2 id="Production-branch"><a href="#Production-branch" class="headerlink" title="Production branch"></a>Production branch</h2><p>GitLab Flow总共提出了三种场景下分别使用不同的分支模型，最简单的是产品分支模型。它与GitHub Flow唯一的不同，仅多了一个production分支，当我们觉得master上的代码足够成熟，将代码合并到production上。在这个模型中master属于production的上游分支，所有的更改只在master上修改。当完善后拉到production上。<br><img src="https://docs.gitlab.com/ee/workflow/production_branch.png" alt=""></p><h2 id="Environment-branches"><a href="#Environment-branches" class="headerlink" title="Environment branches"></a>Environment branches</h2><p>之前，就提问过，遇到测试环境怎么办？这时候我们需要引入环境分支，例如pre-production分支进行测试。它的模型结构与Production branch基本一致，不详说<br><img src="https://docs.gitlab.com/ee/workflow/environment_branches.png" alt=""></p><h2 id="Release-branches"><a href="#Release-branches" class="headerlink" title="Release branches"></a>Release branches</h2><p>Release branches是GitLab提出的第三种分支模型，它适用于您需要将产品发布到外部的情况。它与Environment branches模型不同，它使用版本的分支代替了production分支。当然，一个项目中可能存在多个版本分支，这取决于您维护的版本数。<br><img src="https://docs.gitlab.com/ee/workflow/release_branches.png" alt=""><br>就我而言，比较喜欢Release branches，因为比较喜欢<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本</a>   </p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul><li>Q:如果同时有多个更新在master上，其中一个较为紧急，怎么优先发布（或者存在一个Bug修复，如何合并到维护的release分支）？</li><li>A:可以使用git cherry-picked拉取某次提交到指定分支</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Git Flow By Vincent Driessen</a><br><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener">GitHub Flow</a><br><a href="https://docs.gitlab.com/ee/workflow/gitlab_flow.html" target="_blank" rel="noopener">GitLab Flow</a>    </p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Certbot 为你的HTTP服务加一层SSL协议</title>
      <link href="/simple/2018/04/26/almond/lets-encrypt-certbot/"/>
      <url>/simple/2018/04/26/almond/lets-encrypt-certbot/</url>
      
        <content type="html"><![CDATA[<p>谷歌Chrome安全产品经理艾米丽·谢克特（Emily Schechter）发表博文，证实当该公司在7月发布Chrome 68浏览器时，该浏览器将把所有未采用HTTPS（安全套接字层超文本传输协议）加密的网站都标记为“不安全”网站。    </p><p>Chrome作为浏览器界的巨头，做出如此的决定，将极大的推进HTTPS的进程，我们自然也应该跟进，一同建立更安全的网络环境。但一般证书都是较为昂贵的，因此互联网安全研究小组Internet Security Research Group(ISRG)以及Linux基金会等，提供了公益的项目，用于加速HTTPS的发展    </p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。</p><h2 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h2><p>Let’s Encrypt是一个公益的，免费的，自动化的和开源的证书颁发机构(CA)。是由互联网安全研究小组(ISRG)提供的服务。</p><h2 id="Certbot"><a href="#Certbot" class="headerlink" title="Certbot"></a>Certbot</h2><p>Certbot是一个简单易用的工具，它能为您的Web服务器获取和部署SSL/TLS证书。Certbot是EFF和其他公司为Let’s Encrypt提供的客户端。在之前，它被称为“官方的Let’s Encrypt客户端”或“Let’s Encrypt 的Python客户端”。Certbot同样支持其他的支持ACME协议的证书颁发机构。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以在官网<a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a>上获取其安装文档，由于我服务端是Ubuntu16.04，同时以安装Nginx，所以选择了与此相应的安装文档。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install software-properties-common</span><br><span class="line">$ sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python-certbot-nginx</span><br></pre></td></tr></table></figure></p><p>Ubuntu上一般通过apt-get包管理工具安装。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>Certbot 有支持多环境的Nginx插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot --nginx</span><br></pre></td></tr></table></figure></p><p>接下来是一些列问答式的配置，安装要求，或者自己的需求填写好<br>之后，我们可以发现网站已经可以通过https访问了</p><h2 id="Nginx代理"><a href="#Nginx代理" class="headerlink" title="Nginx代理"></a>Nginx代理</h2><p>Certbot 的Nginx配置在<code>/etc/nginx/sites-enabled/default</code>中，我们可以找到配置的网站<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    root /var/www/html;</span><br><span class="line">    index index.html index.htm index.nginx-debian.html;</span><br><span class="line">    server_name x.j-time.cn; # managed by Certbot</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">    location / &#123;</span><br><span class="line">        # First attempt to serve request as file, then</span><br><span class="line">        # as directory, then fall back to displaying a 404.</span><br><span class="line">        try_files $uri $uri/ =404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /bill-server/ &#123;</span><br><span class="line">         proxy_pass  http://localhost:8689/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ## ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这之中，我可以实现我们自己的代理，例如简单的转发到本地一个服务上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service nginx restart</span><br></pre></td></tr></table></figure></p><p>重新Nginx服务</p><h2 id="重新获取证书"><a href="#重新获取证书" class="headerlink" title="重新获取证书"></a>重新获取证书</h2><p>证书都是有有效期的，我们需要在有效期内重新获取更新证书，Let’s Encrypt的证书有效期为3个月。所以我们需要通过Certbot工具自动的更新证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo certbot renew --dry-run</span><br></pre></td></tr></table></figure></p><h1 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h1><p>打开配置好的地址<a href="https://x.j-time.cn/" target="_blank" rel="noopener">https://x.j-time.cn/</a>，能正常的通过https访问了，同时谷歌、火狐等浏览器，也将此站点标记为了安全站点</p><h1 id="更多细节"><a href="#更多细节" class="headerlink" title="更多细节"></a>更多细节</h1><p><a href="https://certbot.eff.org/docs/index.html" target="_blank" rel="noopener">Certbot Documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot使用GitLab CI自动部署</title>
      <link href="/simple/2018/04/22/almond/spring-boot-autodeploy-with-gitlab/"/>
      <url>/simple/2018/04/22/almond/spring-boot-autodeploy-with-gitlab/</url>
      
        <content type="html"><![CDATA[<h1 id="定义场景"><a href="#定义场景" class="headerlink" title="定义场景"></a>定义场景</h1><p>spring boot应用在手动部署过程中主要分为两步，打包编译与上传部署（也可能存在测试环境，但由于该项目目前只有我开发，并未写测试用例）。同样的在gitlab-ci文件中也定义相应的两步骤<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>使用GitLab公共CI服务为Spring Boot打包编译。image定义所使用的docker镜像，stage指定场景，script打包脚本（跳过测试阶段），artifacts定义需要归档的文件，only指定仅release分支打包（支持正则表达式）<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">release-build:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">maven:3.5.2-jdk-8</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">"mvn package -B -Dmaven.test.skip=true"</span></span><br><span class="line"><span class="attr">  artifacts:</span></span><br><span class="line"><span class="attr">    paths:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">target/bill-server.jar</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/^release-.*$/</span></span><br></pre></td></tr></table></figure></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>配置文件的结构与编译的基本一直，这里使用ubuntu镜像，如果您使用的yam请替换相应的命令。如果您使用自己的CI Runner(shell)，建议密钥存放在自己的服务器上，手动配置实现对部署服务器的ssh访问<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">release-deploy:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">  stage:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client git -y )'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">eval</span> <span class="string">$(ssh-agent</span> <span class="bullet">-s)</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment">## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store</span></span><br><span class="line">    <span class="comment">## We're using tr to fix line endings which makes ed25519 keys work</span></span><br><span class="line">    <span class="comment">## without extra base64 encoding.</span></span><br><span class="line">    <span class="comment">## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Generate the private/public key pair using:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     ssh-keygen -f deploy_key -N ""</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># then set the $SSH_PRIVATE_KEY environment variable in the CI (Travis-CI,</span></span><br><span class="line">    <span class="comment"># GitLab-CI, ...) to the base64 encoded private key:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     cat deploy_key | base64 -w0</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># and add the public key `deploy_key.pub` into the target git repository (with</span></span><br><span class="line">    <span class="comment"># write permissions).</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ssh-add</span> <span class="string">&lt;(echo</span> <span class="string">"$SSH_PRIVATE_KEY"</span> <span class="string">| base64 --decode)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - mkdir -p ~/.ssh</span></span><br><span class="line"><span class="string">    - chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - ssh-keyscan 119.28.1.107 &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">    - chmod 644 ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">    - scp target/bill-server.jar ubuntu@119.28.1.107:bill</span></span><br><span class="line"><span class="string">    - ssh ubuntu@119.28.1.107 "cd bill; sh bill-start.sh"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/^release-.*$/</span></span><br></pre></td></tr></table></figure></p><p>其中shell脚本，与我的<a href="https://jiangtj.gitlab.io/articles/almond/spring-boot-autorun-with-gitlab/">另一篇博客</a>类似，稍做修改就行</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noopener">GitLab CI Document</a></li><li><a href="https://gitlab.com/dream-room/bill-server/blob/master/.gitlab-ci.yml" target="_blank" rel="noopener">bill-server example</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI </tag>
            
            <tag> Java </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot 自动重启脚本</title>
      <link href="/simple/2018/04/19/almond/spring-boot-autorun-with-gitlab/"/>
      <url>/simple/2018/04/19/almond/spring-boot-autorun-with-gitlab/</url>
      
        <content type="html"><![CDATA[<p>一个脚本，自动从GitLab上下载jar，同时重启服务。为后续的CI自动部署做准备<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#defined</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"通过GitLab-CI下载jar"</span></span><br><span class="line">wget -O bill-server.jar <span class="string">"https://gitlab.com/dream-room/bill-server/-/jobs/artifacts/<span class="variable">$1</span>/raw/target/bill-server.jar?job=release-build"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"查询已存在进程"</span></span><br><span class="line">pgrep -af bill-server</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"结束已存在进程"</span></span><br><span class="line">pkill -f bill-server</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"开始运行<span class="variable">$1</span>"</span></span><br><span class="line">nohup java -jar bill-server.jar &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"更新结束"</span></span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bill-start.sh release-0.0.3</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI </tag>
            
            <tag> Java </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试驱动开发(TDD)的实践</title>
      <link href="/simple/2018/04/14/almond/test-driven%20development/"/>
      <url>/simple/2018/04/14/almond/test-driven%20development/</url>
      
        <content type="html"><![CDATA[<p>测试驱动开发(TDD)是一种很好的方法论，虽然在国内并不被重视。但仍然想抽时间写一篇关于测试驱动开发的文档。      </p><p>OK,最好的描述方式应该分为三部分吧，是什么？为什么？怎么做？那么就从这三部分，分别的描述测试驱动开发方法论。 </p><a id="more"></a>  <h1 id="What-TDD-是什么"><a href="#What-TDD-是什么" class="headerlink" title="What: TDD 是什么"></a>What: TDD 是什么</h1><p>测试驱动开发，英文全称Test-Driven Development，简称TDD，是一种不同于传统软件开发流程的新型的开发方法。它要求在编写某个功能的代码之前先编写测试代码，然后只编写使测试通过的功能代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，并加速开发过程。    </p><p>Kent Beck先生最早在其极限编程（XP）方法论中，向大家推荐“测试驱动”这一最佳实践，还专门撰写了《测试驱动开发》一书，详细说明如何实现。经过几年的迅猛发展，测试驱动开发已经成长为一门独立的软件开发技术，其名气甚至盖过了极限编程。      </p><h1 id="Why-为什么需要-TDD"><a href="#Why-为什么需要-TDD" class="headerlink" title="Why: 为什么需要 TDD"></a>Why: 为什么需要 TDD</h1><blockquote><p>再摘个百度百科中的例子    </p></blockquote><p>盖房子的时候，工人师傅砌墙，会先用桩子拉上线，以使砖能够垒的笔直，因为垒砖的时候都是以这根线为基准的。TDD就像这样，先写测试代码，就像工人师傅先用桩子拉上线，然后编码的时候以此为基准，只编写符合这个测试的功能代码。    </p><p>而一个新手或菜鸟级的小师傅，却可能不知道拉线，而是直接把砖往上垒，垒了一些之后再看是否笔直，这时候可能会用一根线，量一下砌好的墙是否笔直，如果不直再进行校正，敲敲打打。使用传统的软件开发过程就像这样，我们先编码，编码完成之后才写测试程序，以此检验已写的代码是否正确，如果有错误再一点点修改。    </p><p>你是希望先砌墙再拉线，还是希望先拉线再砌墙呢？如果你喜欢前者，那就算了，而如果你喜欢后者，那就转入TDD阵营吧！详细可参阅。   </p><p>上述例子中也已经能看出TDD的优点。但还是做个简单总结吧    </p><p>它有助于编写简洁可用和高质量的代码，有很高的灵活性和健壮性，能快速响应变化，并加速开发过程    </p><p>我们可以这么理解这句话，原本需求-&gt;产品设计-&gt;产品实现，调整为需求-&gt;产品设计-&gt;产品开发设计（Test阶段）-&gt;产品实现（Develop阶段）    </p><ul><li>产品开发设计（Test过程）: 由于仅先编写测试用例，相对于直接的开发更加迅速，能快速的响应需求的变化     </li><li>产品实现（Develop阶段）: 我们仅需确保测试用例都通过，能有效的降低引入bug的可能性。同时测试用例的存在，对于后期维护，提供了强大的支持（回归测试）    </li></ul><h1 id="How-TDD-如何实践"><a href="#How-TDD-如何实践" class="headerlink" title="How: TDD 如何实践"></a>How: TDD 如何实践</h1><p>我的实践是 Spring Test + TestNG 集成测试，再配合 Spring Restdocs 文档生成。    </p><h2 id="Spring-Test"><a href="#Spring-Test" class="headerlink" title="Spring Test"></a>Spring Test</h2><p>首先，这不是一个独立的框架，它与Spring框架是绑在一起的，正如开头的第一句话所说，测试驱动在国内不受重视，但在国外恰恰相反。大部分国外的开源框架都集成了测试所需的一些工具类，比如<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-testing" target="_blank" rel="noopener">Spring Boot 单独的一节讲解测试</a>。在这里我们需要用到它的一个TestNG支持的抽象类<code>AbstractTransactionalTestNGSpringContextTests</code>，这个类的用于初始化Spring环境以及添加事务支持   </p><h2 id="TestNG"><a href="#TestNG" class="headerlink" title="TestNG"></a>TestNG</h2><p>在Java里，最为流行的测试框架应该是JUnit和TestNG，他们的功能也十分相似。在这里，做个简单的比较，和阐述一下采用TestNG的原因    </p><p>首先，先说一下JUnit，它是个优秀的单元测试框架，严格的遵守一个实现类一个测试类的方式。事实上，如果对代码质量要求很高，的确需要对每个类都编写测试用例。但例如Spring的代码，分为Dao层，Service层，Controller层，即便只是完成一个小功能，都需要编写多个测试类，来完成测试。这中间会耗费许多的时间，同时对于我们程序猿来说，也是件痛苦的事。而且，一般情况下，并需要如此高的质量。TestNG既包涵了JUnit的单元测试的功能，同时他也可以进行集成测试。我们仅需对功能点（接口）编写相应的集成测试，这能减少大量的代码量。所以，如果能把测试用例的编写变成一般轻松的事，谁不愿这么做呢   </p><h2 id="Spring-Restdocs"><a href="#Spring-Restdocs" class="headerlink" title="Spring Restdocs"></a>Spring Restdocs</h2><p>Spring REST Docs helps you to document RESTful services. It combines hand-written documentation written with Asciidoctor and auto-generated snippets produced with Spring MVC Test. This approach frees you from the limitations of the documentation produced by tools like Swagger. It helps you to produce documentation that is accurate, concise, and well-structured. This documentation then allows your users to get the information they need with a minimum of fuss.     </p><p>简单的说，它能使用Asciidoctor组合Spring MVC Test生成的代码片段，编写RESTful的接口文档   </p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>主要是Maven的配置，因为使用TestNG以及Spring Restdocs，我们需要添加以下依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- option: remove junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- testng --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.assertj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>assertj-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- restdocs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.restdocs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-restdocs-mockmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同时还需要配置Maven插件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.asciidoctor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asciidoctor-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 默认位置在src/main/asciidoc下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sourceDocumentName</span>&gt;</span>index.adoc<span class="tag">&lt;/<span class="name">sourceDocumentName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">doctype</span>&gt;</span>book<span class="tag">&lt;/<span class="name">doctype</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allow-uri-read</span>&gt;</span>true<span class="tag">&lt;/<span class="name">allow-uri-read</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute-missing</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">attribute-missing</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>generate-docs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>process-asciidoc<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">backend</span>&gt;</span>html5<span class="tag">&lt;/<span class="name">backend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sourceHighlighter</span>&gt;</span>highlight.js<span class="tag">&lt;/<span class="name">sourceHighlighter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">toc2</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">docinfo</span>&gt;</span>shared-head<span class="tag">&lt;/<span class="name">docinfo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.restdocs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-restdocs-asciidoctor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h2><ol><li><p>我们需要定义自己的TestNG抽象类，继承<code>AbstractTransactionalTestNGSpringContextTests</code>，并配置Spring Restdocs      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAssetsTests</span> <span class="keyword">extends</span> <span class="title">AbstractTransactionalTestNGSpringContextTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ManualRestDocumentation restDocumentation = <span class="keyword">new</span> ManualRestDocumentation(<span class="string">"target/generated-snippets"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(context)</span><br><span class="line">                .apply(documentationConfiguration(<span class="keyword">this</span>.restDocumentation)).build();</span><br><span class="line">        <span class="keyword">this</span>.restDocumentation.beforeTest(getClass(), method.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.restDocumentation.afterTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试用例，继承我们的抽象类<code>AbstractAssetsTests</code>   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> <span class="keyword">extends</span> <span class="title">AbstractAssetsTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Rollback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = getMockUser();</span><br><span class="line">        <span class="keyword">super</span>.mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/user/add"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(Objects.requireNonNull(JacksonUtils.toJson(user))))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">                .andDo(document(<span class="string">"user-add"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Rollback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResultDto&lt;User&gt; add = userService.add(getMockUser());</span><br><span class="line">        User user = add.getObject();</span><br><span class="line">        <span class="keyword">super</span>.mockMvc.perform(MockMvcRequestBuilders.delete(<span class="string">"/user/delete"</span>)</span><br><span class="line">                .param(<span class="string">"ids"</span>,user.getId()+<span class="string">""</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">                .andDo(document(<span class="string">"user-delete"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> User <span class="title">getMockUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User.builder()</span><br><span class="line">                .name(<span class="string">"test-001"</span>)</span><br><span class="line">                .password(<span class="string">"123456"</span>)</span><br><span class="line">                .pointId(<span class="number">1L</span>)</span><br><span class="line">                .roleId(<span class="number">1L</span>)</span><br><span class="line">                .description(<span class="string">"TestNG测试帐号"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Asciidoctor拼接代码片段   </p><figure class="highlight adoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">= 接口文档</span></span><br><span class="line">Mr.J;</span><br><span class="line"><span class="meta">:toc2:</span></span><br><span class="line"><span class="meta">:toc-title:</span> 目录</span><br><span class="line"><span class="meta">:doctype:</span> book</span><br><span class="line"><span class="meta">:icons:</span> font</span><br><span class="line"><span class="meta">:source-highlighter:</span> highlightjs</span><br><span class="line"><span class="meta">:docinfo:</span> shared-head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include::readme.adoc[]</span><br><span class="line"></span><br><span class="line">include::user/user-list.adoc[]</span><br><span class="line"></span><br><span class="line"><span class="section">== 例子</span></span><br><span class="line"></span><br><span class="line">简单的接口文档使用 Spring REST Docs 和 TestNG.</span><br><span class="line"></span><br><span class="line"><span class="code">`SampleTestNgApplicationTests`</span> makes a call to a very simple service and produces three</span><br><span class="line">documentation snippets.</span><br><span class="line"></span><br><span class="line">用户添加:</span><br><span class="line"></span><br><span class="line">include::&#123;snippets&#125;/user-add/curl-request.adoc[]</span><br><span class="line"></span><br><span class="line">用户添加响应:</span><br><span class="line"></span><br><span class="line">include::&#123;snippets&#125;/user-add/http-response.adoc[]</span><br><span class="line"></span><br><span class="line"><span class="section">=== 三级标题</span></span><br><span class="line"></span><br><span class="line">恩恩恩</span><br></pre></td></tr></table></figure></li></ol><h2 id="运行试试"><a href="#运行试试" class="headerlink" title="运行试试"></a>运行试试</h2><ol><li><p>Maven运行测试用例<br><img src="https://jiangtj.github.io/assets/img/others/testng-fail.png" alt=""><br>隔得时间有的久（三个月前），加接口变动，其中一个测试用例跑失败了。当然啦，这也展示了Spring Restdocs的另一大特性，对文档的校验，能时刻保证您的文档与接口字段对应，从而减少因文档不准引入错误的可能性    </p></li><li><p>运行接口文档<br><img src="https://jiangtj.github.io/assets/img/others/spring-restdocs-test.png" alt="">   </p></li></ol><h2 id="测试驱动"><a href="#测试驱动" class="headerlink" title="测试驱动"></a>测试驱动</h2><p>以上的步骤，我们走完了测试环境的搭建。但测试驱动并不是写完功能代码编写测试用例，而且在开始前（设计阶段），编写测试用例，为后续的开发提供依据，同时接口文档也需要提前生成为前后端分离开发提供助力    </p><p><strong>那，该怎么做呢？</strong>   </p><p>这时候，我们就需要模拟一个实现类，大部分情况下是模拟一个Service。这里推荐使用Spring Test的一个工具<code>ReflectionTestUtils</code>，注入测试实现类     </p><ol><li><p>先创建service接口的测试实现，例如    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTestBean</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDto&lt;User&gt; <span class="title">getUserById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        ResultDto&lt;User&gt; result = <span class="keyword">new</span> ResultDto&lt;&gt;(ResultCode.SUCCESS);</span><br><span class="line">        result.setObject(<span class="keyword">new</span> User());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDto&lt;User&gt; <span class="title">add</span><span class="params">(User t)</span> </span>&#123;</span><br><span class="line">        ResultDto&lt;User&gt; result = <span class="keyword">new</span> ResultDto&lt;&gt;(ResultCode.SUCCESS);</span><br><span class="line">        result.setObject(t);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在调用之前注入测试的模拟对象    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Rollback</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为userController注入userService对象</span></span><br><span class="line">    ReflectionTestUtils.setField(userController, <span class="string">"userService"</span>, <span class="keyword">new</span> UserServiceTestBean());</span><br><span class="line"></span><br><span class="line">    User user = getMockUser();</span><br><span class="line">    <span class="keyword">super</span>.mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/user/add"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">            .content(Objects.requireNonNull(JacksonUtils.toJson(user))))</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">            .andDo(document(<span class="string">"user-add"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这样我们完成了在实现之前，优先编写完测试用例。当然当service实现后，相应的mock代码都需要注释掉。使用Mockito模拟service对象也是行的，但在尝试后，不如直接编写测试对象来的高效。    </p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>上面代码开源在GitHub上，有兴趣的可以去看看<br><a href="https://github.com/JiangTJ/enterpriseAssetManagement/tree/testng%26spring-rest-docs" target="_blank" rel="noopener">https://github.com/JiangTJ/enterpriseAssetManagement/tree/testng%26spring-rest-docs</a><br>缺少mock相关的代码，毕竟当时写测试用例时，service已经全部实现了，当然，您可以fork后自己尝试一下mock一些对象    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> 实践 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL5.7 IN与EXISTS</title>
      <link href="/simple/2017/11/30/almond/mysql-in-and-exists/"/>
      <url>/simple/2017/11/30/almond/mysql-in-and-exists/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章中的表参考这里的创建<a href="http://blog.csdn.net/stevendbaguo/article/details/73467649" target="_blank" rel="noopener">http://blog.csdn.net/stevendbaguo/article/details/73467649</a></p></blockquote><h3 id="数据表的创建"><a href="#数据表的创建" class="headerlink" title="数据表的创建"></a>数据表的创建</h3><ul><li>制造数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">test</span>; </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>( </span><br><span class="line">    <span class="keyword">ID</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    <span class="string">`Name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>( <span class="keyword">ID</span> ) </span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>创建生成测试数据的存储过程<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> pre_test; </span><br><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pre_test() </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>; </span><br><span class="line">WHILE i&lt;4000000 DO </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span> ( <span class="keyword">ID</span>,<span class="string">`Name`</span> ) <span class="keyword">VALUES</span>( i, <span class="keyword">CONCAT</span>( <span class="string">'Carl'</span>, i ) ); </span><br><span class="line"><span class="keyword">SET</span> i = i+<span class="number">1</span>; </span><br><span class="line">IF i%10000 = 0 THEN </span><br><span class="line"><span class="keyword">COMMIT</span>; </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>; </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>; </span><br><span class="line"><span class="keyword">END</span>; //</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li></ul><p>运行存储过程</p><ul><li>创建子表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_bak <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">LIMIT</span> <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> ind_t_id <span class="keyword">ON</span> <span class="keyword">test</span>(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> ind_t1_id <span class="keyword">ON</span> test_bak(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="SQL测试"><a href="#SQL测试" class="headerlink" title="SQL测试"></a>SQL测试</h3><p>[SQL]<br>SELECT * FROM test a LEFT JOIN test_bak b ON a.id = b.id LIMIT 5000;<br>时间: 0.017s   </p><p>[SQL]<br>SELECT * FROM test a LIMIT 5000;<br>时间: 0.003s</p><p>[SQL]<br>SELECT * FROM test a WHERE a.ID in (SELECT ID FROM test_bak) LIMIT 5000;<br>时间: 0.004s   </p><p>[SQL]<br>SELECT * FROM test a WHERE EXISTS(SELECT 1 FROM test_bak b WHERE b.id = a.id) LIMIT 5000;<br>时间: 19.255s    </p><p>[SQL]<br>SELECT * FROM test_bak b WHERE b.ID in (SELECT ID FROM test) LIMIT 5000;<br>时间: 0.003s     </p><p>[SQL]<br>SELECT * FROM test_bak b WHERE EXISTS(SELECT 1 FROM test a WHERE b.id = a.id) LIMIT 5000;<br>时间: 0.006s    </p><p>[SQL]<br>SELECT * FROM test a WHERE a.<code>Name</code> in (SELECT <code>Name</code> FROM test_bak) LIMIT 1000;<br>时间: 0.101s   </p><p>[SQL]<br>SELECT * FROM test a WHERE EXISTS(SELECT 1 FROM test_bak b WHERE b.<code>Name</code> = a.<code>Name</code>) LIMIT 1000;<br>时间: 0.229s  </p><p>注意：最后两条LIMIT别大于1000   </p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>MySQL自某个版本起（不记得了，逃~~），对于in中无与外表的数据做条件判断的查询，会优化为join方式执行。这比EXISTS高效的多<br>当然，in中内表不能与外表的数据做条件判断，否则请用join    </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitLab Pages 搭建Hexo教程</title>
      <link href="/simple/2017/10/10/almond/gitlab-pages-for-hexo/"/>
      <url>/simple/2017/10/10/almond/gitlab-pages-for-hexo/</url>
      
        <content type="html"><![CDATA[<p>大部分情况下，都是github pages与hexo组合搭建静态博客。但不可否认的是，这样存在一些问题。比如，每次文章写完都需要要编译，才能上传，如果我仅仅想写个博客，这样的操作显得繁琐。又比如，你拥有多台电脑的情况，你需要在每台电脑上都配置一样的环境。    </p><p>所以通过持续集成CI/CD的方式，让编译自动化，是一种很不错的解决方案。这里将介绍gitlab-ci来简化环境的搭建与编译过程。当然静态资源将托管在gitlab-pages上。   </p><blockquote><p>There is also a tutorial in English</p></blockquote><a id="more"></a><h2 id="中文教程"><a href="#中文教程" class="headerlink" title="中文教程"></a>中文教程</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>点击打开<a href="https://gitlab.com/groups/pages" target="_blank" rel="noopener">gitlab pages例子页面</a></li><li>fork其中的hexo项目到自己的账户（如果没有需要创建一个新的gitlab账户）</li><li>删除fork关系（点击项目左侧的settings-&gt;General，然后展开Advanced settings，删除fork关系）</li><li>可选：修改项目信息，如Project name、Project description、Path等。<em>这里建议Path和Project name一同修改。</em>gitlab pages地址规则与github是一致的  </li><li>可选：<strong>建议修改<code>.gitlab-ci.yml</code>中node版本为最新的稳定版</strong></li><li>修改任意一文件，如readme.md或者source/_posts下的文章</li></ol><p>当你完成这些步骤，你可以点击右侧的CI/CD，可以看到如下画面：  </p><p><img src="https://jiangtj.github.io/assets/img/others/ci-1.jpg" alt="">  </p><p>当然你看到的可能是pending或running，这时请耐心等待。当显示为passed时，在浏览器中输入托管地址<a href="https://your-name.gitlab.io/projext-name，能访问，就意味着搭建成功咯" target="_blank" rel="noopener">https://your-name.gitlab.io/projext-name，能访问，就意味着搭建成功咯</a>    </p><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>这个项目结构是标准的hexo的项目，除了多个一个<code>.gitlab-ci.yml</code>，如下图   </p><p><img src="https://jiangtj.github.io/assets/img/others/ci-2.jpg" alt="">  </p><p>我们仅需关心script部分即可，而这部分其实是标准的hexo命令。    </p><p>如果你想使用next主题（最受欢迎的hexo主题），<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">http://theme-next.iissnan.com</a>官网的网站上已有详细的教程    </p><h2 id="English"><a href="#English" class="headerlink" title="English"></a>English</h2><h3 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h3><ol><li>Click <a href="https://gitlab.com/groups/pages" target="_blank" rel="noopener">example projects for gitlab pages</a></li><li>Fork the project of hexo to your account(If you do not have any gitlab account, you can create a new)</li><li>Remove fork relationship(Choose settings-&gt;General from the list on the left.And expand Advanced settings to remove fork relationship)</li><li>Optional: modify project info，such as Project name, Project description, Path etc. <em>Here’s a suggestion about that path and Project name modify together.</em> your website will be available at <a href="https://username.gitlab.io/projectname" target="_blank" rel="noopener">https://username.gitlab.io/projectname</a>, it is familiar with gitlab pages.</li><li>Optional: <strong>suggested modify the node’s version from <code>.gitlab-ci.yml</code> to last LTE version</strong></li><li>Modify any file, such as readme.md or the article under source/_posts</li><li>Choose CI/CD, waiting job completion</li><li>Click <a href="https://your-name.gitlab.io/projext-name" target="_blank" rel="noopener">https://your-name.gitlab.io/projext-name</a></li></ol><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><ul><li>you can modify script in <code>.gitlab-ci.yml</code>.</li><li>you can change the theme to next, which is most popular theme of hexo, by a official tutorial <a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">http://theme-next.iissnan.com</a></li></ul><h2 id="Updated"><a href="#Updated" class="headerlink" title="Updated"></a>Updated</h2><h3 id="Command-Lines"><a href="#Command-Lines" class="headerlink" title="Command Lines"></a>Command Lines</h3><p>Use command lines to init a blog with gilab page, written in 2018.9.19</p><h4 id="Init-hexo-project"><a href="#Init-hexo-project" class="headerlink" title="Init hexo project"></a>Init hexo project</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init your-blog-dir</span><br><span class="line"><span class="built_in">cd</span> your-blog-dir</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>, you can test it.</p><h4 id="Git-remote"><a href="#Git-remote" class="headerlink" title="Git remote"></a>Git remote</h4><p>Assert your project remote url is <a href="https://gitlab.com/your-gitlab-name/project-name" target="_blank" rel="noopener">https://gitlab.com/your-gitlab-name/project-name</a>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@gitlab.com:&lt;your-gitlab-name&gt;/&lt;project-name&gt;.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Initial commit"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><h4 id="Add-CI-config"><a href="#Add-CI-config" class="headerlink" title="Add CI config"></a>Add CI config</h4><p>Please rename <code>&lt;*-name&gt;</code> to real name, such as <code>sed -ri &#39;s/.*(url:.*)/url: https:\/\/jiangtj.gitlab.io/g&#39; _config.yml</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O .gitlab-ci.yml https://gitlab.com/JiangTJ/hexo/raw/master/.gitlab-ci.yml?inline=<span class="literal">false</span></span><br><span class="line">sed -ri <span class="string">'s/.*(url:.*)/url: https:\/\/&lt;your-gitlab-name&gt;.gitlab.io/g'</span> _config.yml</span><br></pre></td></tr></table></figure></p><p>If project-name is not your-gitlab-name.gitlab.io, update <code>root</code> var.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ri <span class="string">'s/.*(root:.*)/root: \/&lt;project-name&gt;\//g'</span> _config.yml</span><br></pre></td></tr></table></figure></p><p>Push to remote<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"CI"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>Wait pipeline finish running, your hexo blog is running at <a href="https://your-gitlab-name.gitlab.io/project-name" target="_blank" rel="noopener">https://your-gitlab-name.gitlab.io/project-name</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart之环境搭建</title>
      <link href="/simple/2017/10/07/almond/dart-get-start/"/>
      <url>/simple/2017/10/07/almond/dart-get-start/</url>
      
        <content type="html"><![CDATA[<p>Dart 是一种易学习、易扩展、跨平台的编程语言。   </p><ul><li>易学习：语法感觉很熟悉，语义是干净和一致的。是Java与Javascript的结合体。</li><li>易扩展：仅谷歌就有超过200万行的生产Dart代码。应用程序可以达到数十万行代码。</li><li>跨平台：Dart可以在每一个现代浏览器、命令行、服务器和移动设备上快速运行。</li></ul><p>Google 在大型项目中部署使用 Dart。例如，下一代的AdWords (谷歌最重要的赚钱应用)运行在Dart上。   </p><a id="more"></a><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>windows可下载安装程序，也可以使用Chocolatey来安装<br>下载地址：<a href="https://www.dartlang.org/install" target="_blank" rel="noopener">https://www.dartlang.org/install</a><br><em>需翻墙</em>  </p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>推荐下载WebStorm<br>下载地址：<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">https://www.jetbrains.com/webstorm/</a>  </p><h3 id="第一个Angular应用"><a href="#第一个Angular应用" class="headerlink" title="第一个Angular应用"></a>第一个Angular应用</h3><p>官方推荐使用AngularDart，当然也有其他用户维护的vue，有兴趣可以尝试下。   </p><ol><li>在WebStorm的欢迎界面，选择创建新的工程。或者点击菜单的File &gt; New &gt; Project… 。  </li><li>在左侧的菜单中选择Dart。  </li><li>如果Dart SDK path 和 Dartium path fields没有值，选择安装路径。  </li><li>修改Location中的值，已设置位置路径与应用的名称  </li><li>Generate sample content 打上勾  </li><li>选择AngularDart Web App template  </li><li>创建  </li></ol><p><img src="https://webdev.dartlang.org/guides/images/create-ng2-project.png" alt=""></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>右键 pubspec.yaml 选择 Pub: Get Dependencies 更新依赖.   </li><li>右键 web/index.html 文件，然后选择 Run ‘index.html’  </li></ul><p><img src="https://webdev.dartlang.org/guides/images/run-app-in-ws.png" alt="">  </p><p>看到下面画面时就好ok咯   </p><p><img src="https://webdev.dartlang.org/guides/images/run-app.png" alt="">  </p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java ProjectReactor框架之Flux篇</title>
      <link href="/simple/2017/09/16/almond/Java%20ProjectReactor-Flux/"/>
      <url>/simple/2017/09/16/almond/Java%20ProjectReactor-Flux/</url>
      
        <content type="html"><![CDATA[<p>Spring5现处在第四个预发布版，正式版将要发布了，它带来的一大特性就是响应式框架Spring WebFlux。默认使用ProjectReactor框架。因此。本文通过ProjectReactor中的Flux，来学习使用该框架，以及了解其传递的思想。   </p><p>本文基于Reactor3.1 rc1    </p><p>Reactor官方地址<a href="http://projectreactor.io/" target="_blank" rel="noopener">http://projectreactor.io/</a>，官方文档写的十分详细，如果您有不错的英文能力，建议直接阅读官方文档。  </p><a id="more"></a><h3 id="Spring-WebFlux-实践"><a href="#Spring-WebFlux-实践" class="headerlink" title="Spring WebFlux 实践"></a>Spring WebFlux 实践</h3><p>首先，为大家带来一个使用了ProjectReactor的例子，该例子使用Spring Boot 2.0.0.BUILD-SNAPSHOT。因Spring Boot推荐默认配置（约定）优先，可以极大减少大量的重复的模版化代码，简化搭建过程。   </p><p><em>Spring Boot 2.0.0稳定版还未出，不过也快了，目前处在第四个里程碑版本。</em>   </p><h4 id="step1-搭建环境"><a href="#step1-搭建环境" class="headerlink" title="step1:搭建环境"></a>step1:搭建环境</h4><p>spring boot部分工具如idea提供了可视化操作，选择reactive-web模块即可（你也可以多选一些你需要的模块），如果没有可视化的工具，也可访问官网的开始页面<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a>，或者在pom中引入一下模块（web开发主流仍是maven，所以未采用gradle）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="step2-编写处理类"><a href="#step2-编写处理类" class="headerlink" title="step2:编写处理类"></a>step2:编写处理类</h4><p>编写一个简单的处理类，TestHandler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@NonNullApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">data</span><span class="params">(ServerRequest request)</span></span>&#123;</span><br><span class="line">        Mono&lt;String&gt; mono =  Mono.justOrEmpty(request.queryParam(<span class="string">"data"</span>))</span><br><span class="line">                .defaultIfEmpty(<span class="string">"this is null"</span>)</span><br><span class="line">                .map(it -&gt; it.concat(<span class="string">"! from server webflux!"</span>));</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().body(mono,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="step3-编写路由"><a href="#step3-编写路由" class="headerlink" title="step3:编写路由"></a>step3:编写路由</h4><p>spring webflux也提供了函数试的路由配置，如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">testRouterFunction</span><span class="params">(TestHandler handle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(GET(<span class="string">"/test"</span>).and(accept(APPLICATION_JSON)), handle::data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="step4-测试，验证"><a href="#step4-测试，验证" class="headerlink" title="step4:测试，验证"></a>step4:测试，验证</h4><p>当浏览器输入<a href="http://localhost:8080/test，得到结果：this" target="_blank" rel="noopener">http://localhost:8080/test，得到结果：this</a> is null! from server webflux!<br>当浏览器输入<a href="http://localhost:8688/test?data=hi，得到结果：hi" target="_blank" rel="noopener">http://localhost:8688/test?data=hi，得到结果：hi</a>! from server webflux!</p><p><em>我的webflux项目地址：<a href="https://github.com/JiangTJ/circuasset" target="_blank" rel="noopener">GitHub</a></em></p><h3 id="深入学习"><a href="#深入学习" class="headerlink" title="深入学习"></a>深入学习</h3><blockquote><p>看过实践后，你会发现有大量的使用Flux和Mono，它们是什么呢？</p></blockquote><p>Flux<t> 继承自 Publisher<t> ，用于代表拥有 0 到 n 元素的流，相对于 Mono<t> (其包含0-1个元素) 更加复杂。所以弄懂了Flux，其实也已经对Mono熟悉了。  </t></t></t></p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Flux一般通过静态方法构造，所以先看看它的静态方法。 </p><h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>public static &lt;T,V&gt; Flux<v> combineLatest(Function&lt;Object[],V&gt; combinator, Publisher&lt;? extends T&gt;… sources)<br>构建一个Flux，混合由多个的发布者发布最新事件.</v></p><p><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/combinelatest.png" alt="">  </p><p>Type Parameters:<br>T - 表示发布者的事件类型<br>V - 被混合者混合后的类型<br>Parameters:<br>sources - 发布者，提供事件<br>combinator - 混合者，接受最新的事件，处理并传递给下游。<br>Returns:  一个以Flux为基础的混合流<br><em>不同的参数方法很多，这里都只展示一个。</em>  </p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>public static <t> Flux<t> concat(Publisher&lt;? extends T&gt;… sources)<br>用于连接一个流。与combineLatest不同的是，concat都是在前一个流完成后在连接新的流。而combineLatest，则哪个事件最先到的，哪个先处理。  </t></t></p><p><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/concat.png" alt="">  </p><p>Type Parameters:<br>T - 事件的类型<br>Parameters:<br>sources - 一系列的发布者<br>Returns:  一个新的Flux连接了所有的发布者，并传递给下游    </p><h4 id="concatDelayError"><a href="#concatDelayError" class="headerlink" title="concatDelayError"></a>concatDelayError</h4><p>拥有与concat类似的方法，不同的是，遇到错误不提前拦截，而是等到最后发布的事件处理完成后</p><h4 id="create-push"><a href="#create-push" class="headerlink" title="create,push"></a>create,push</h4><p>public static <t> Flux<t> create(Consumer&lt;? super FluxSink<t>&gt; emitter)<br>通过FluxSink API，以同步或者异步方式创建Flux。<br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Flux.&lt;String&gt;create(emitter -&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ActionListener al = e -&gt; &#123;</span><br><span class="line">        emitter.next(textField.getText());</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// without cleanup support:</span></span><br><span class="line"></span><br><span class="line">    button.addActionListener(al);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// with cleanup support:</span></span><br><span class="line"></span><br><span class="line">    button.addActionListener(al);</span><br><span class="line">    emitter.onDispose(() -&gt; &#123;</span><br><span class="line">        button.removeListener(al);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></t></t></t></p><p>这是非常有用的，如果一个流，需要动态添加或者移除其他的多个事件，通过异步的api。而且，你将不必担心被取消和背压。<br><em>create(Consumer&lt;? super FluxSink<t>&gt; emitter, FluxSink.OverflowStrategy backpressure) 设置背压方式</t></em><br>push方法用处与使用方式与create几乎一致，它们唯一的区别在于CreateMode类型 create为PUSH_PULL，而push为PUSH_ONLY，从文档中也可以一个为多线程一个为单线程  </p><h5 id="backpressure-背压-概念的理解"><a href="#backpressure-背压-概念的理解" class="headerlink" title="backpressure(背压)概念的理解"></a>backpressure(背压)概念的理解</h5><p>这里，我摘自一位大神的话，背压是指在异步场景中，被观察者发送事件速度远快于观察者的处理速度的情况下，一种告诉上游的被观察者降低发送速度的策略。简而言之，背压是流速控制的一种策略。  </p><blockquote><p>更多的背压到<a href="http://www.jianshu.com/p/2c4799fa91a4" target="_blank" rel="noopener">http://www.jianshu.com/p/2c4799fa91a4</a>这里不多做介绍了    </p></blockquote><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>public static <t> Flux<t> defer(Supplier&lt;? extends Publisher<t>&gt; supplier)<br>这个方法提供了一种惰性策略，发布者不会一开始发布消息，直到订阅者创建实例.<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/defer.png" alt=""><br>Type Parameters:<br>T - 发布者发布或订阅者接受的类型<br>Parameters:<br>supplier - 一个发布者的供应者，当订阅的时候回调<br>Returns: 一个惰性的Flux  </t></t></t></p><h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><p>public static <t> Flux<t> empty()<br>创建一个不含任何事件的流.</t></t></p><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><p>public static <t> Flux<t> error(Throwable error)<br>返回一个带着立即终止标识和错误信息的流 </t></t></p><h4 id="first"><a href="#first" class="headerlink" title="first"></a>first</h4><p>public static <i> Flux<i> first(Publisher&lt;? extends I&gt;… sources)<br>挑选出第一个发布者，由其提供事件。能有效避免多个源的冲突。<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/firstemitting.png" alt="">  </i></i></p><h4 id="from"><a href="#from" class="headerlink" title="from"></a>from</h4><p>public static <t> Flux<t> from(Publisher&lt;? extends T&gt; source)<br>public static <t> Flux<t> fromIterable(Iterable&lt;? extends T&gt; it)<br>public static <t> Flux<t> fromStream(Stream&lt;? extends T&gt; s)<br>从一个发布者创建一个flux流  </t></t></t></t></t></t></p><h4 id="fromArray，fromIterable，fromStream"><a href="#fromArray，fromIterable，fromStream" class="headerlink" title="fromArray，fromIterable，fromStream"></a>fromArray，fromIterable，fromStream</h4><p>public static <t> Flux<t> fromArray(T[] array)<br>通过一个数组，或者一个可迭代的元素，或者一个流，创建flux流.  </t></t></p><p><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/fromarray.png" alt="">  </p><p>Type Parameters:<br>T - 数组的类型和Flux的类型<br>Parameters:<br>emmm.. - 数组,可迭代的元素,流<br>Returns: 新的flux流  </p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><p>public static <t> Flux<t> generate(Consumer&lt;SynchronousSink<t>&gt; generator)<br>Programmatically create a Flux by generating signals one-by-one via a consumer callback.  </t></t></t></p><p><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/generate.png" alt="">  </p><p>Type Parameters:<br>T - the value type emitted<br>Parameters:<br>generator - Consume the SynchronousSink provided per-subscriber by Reactor to generate a single signal on each pass.<br>Returns: a Flux<br>没看懂，好像是说，通过编程方式创建一个一对一的消费回调  </p><h4 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h4><p>public static Flux<long> interval(Duration period)<br>间隔一定的时间，发送事件。<br>Runs on the Schedulers.parallel() Scheduler.<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/interval.png" alt="">  </long></p><h4 id="just"><a href="#just" class="headerlink" title="just"></a>just</h4><p>public static <t> Flux<t> just(T… data)<br>创建一个包含一系列元素的flux流<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/justn.png" alt="">  </t></t></p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>public static <i> Flux<i> merge(Publisher&lt;? extends I&gt;… sources)<br>混合多个流，和combineLatest类似，但它要求是同类型的流合并，combineLatest需要提供合并方式<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/merge.png" alt=""> </i></i></p><h4 id="never"><a href="#never" class="headerlink" title="never"></a>never</h4><p>public static <t> Flux<t> never()<br>Create a Flux that will never signal any data, error or completion signal.  </t></t></p><p><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/never.png" alt="">  </p><p>Type Parameters:<br>T - the Subscriber type target<br>Returns:<br>a never completing Flux<br>看一看，不是很明白，该流的用处。 </p><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>public static Flux<integer> range(int start, int count)<br>提供从start，到start + count的所有整数的flux流</integer></p><h4 id="switchOnNext"><a href="#switchOnNext" class="headerlink" title="switchOnNext"></a>switchOnNext</h4><p>public static <t> Flux<t> switchOnNext(Publisher&lt;? extends Publisher&lt;? extends T&gt;&gt; mergedPublishers)<br>从最新的发布者那里获取事件，如果有新的发布者加入，则改用新的发布者。<br>当最后一个发布者完成所有发布事件，并且没有发布者加入，则flux完成。<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/switchonnext.png" alt=""></t></t></p><h4 id="using"><a href="#using" class="headerlink" title="using"></a>using</h4><p>public static &lt;T,D&gt; Flux<t> using(Callable&lt;? extends D&gt; resourceSupplier, Function&lt;? super D,? extends Publisher&lt;? extends T&gt;&gt; sourceSupplier, Consumer&lt;? super D&gt; resourceCleanup)<br>Uses a resource, generated by a supplier for each individual Subscriber, while streaming the values from a Publisher derived from the same resource and makes sure the resource is released if the sequence terminates or the Subscriber cancels.<br>Eager resource cleanup happens just before the source termination and exceptions raised by the cleanup Consumer may override the terminal even.</t></p><p><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/using.png" alt=""></p><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>public static &lt;I,O&gt; Flux<o> zip(Function&lt;? super Object[],? extends O&gt; combinator, Publisher&lt;? extends I&gt;… sources)<br>通过混合者，合并多个流成一个输出流，一一对应合并<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/zip.png" alt="">  </o></p><h4 id="…"><a href="#…" class="headerlink" title="…"></a>…</h4><p>看一下下面的api<br>public static &lt;T1,T2,T3,V&gt; Flux<v> combineLatest(Publisher&lt;? extends T1&gt; source1, Publisher&lt;? extends T2&gt; source2, Publisher&lt;? extends T3&gt; source3, Function&lt;Object[],V&gt; combinator)<br>public static &lt;T1,T2,T3,T4,V&gt; Flux<v> combineLatest(Publisher&lt;? extends T1&gt; source1, Publisher&lt;? extends T2&gt; source2, Publisher&lt;? extends T3&gt; source3, Publisher&lt;? extends T4&gt; source4, Function&lt;Object[],V&gt; combinator)<br>…<br>public static &lt;T1,T2&gt; Flux&lt;Tuple2&lt;T1,T2&gt;&gt; zip(Publisher&lt;? extends T1&gt; source1, lisher&lt;? extends T2&gt; source2)<br>public static &lt;T1,T2,T3&gt; Flux&lt;Tuple3&lt;T1,T2,T3&gt;&gt; zip(Publisher&lt;? extends T1&gt; source1, lisher&lt;? extends T2&gt; source2, lisher&lt;? extends T3&gt; source3)<br>…<br>ヽ(o_ _)o摔倒，我也是服了project reactor 官方。</v></v></p><h3 id="常用的实例方法"><a href="#常用的实例方法" class="headerlink" title="常用的实例方法"></a>常用的实例方法</h3><p>静态的方法介绍完了，但是实例方法比静态方法多太多，所以这里只举常用的几种介绍</p><h4 id="all-any-hasElement-hasElements"><a href="#all-any-hasElement-hasElements" class="headerlink" title="all,any,hasElement,hasElements"></a>all,any,hasElement,hasElements</h4><p>这几个方法调用，均返回包涵一个Boolean信号的Mono。</p><ul><li>all(Predicate&lt;? super T&gt; predicate)表示所有值均满足条件</li><li>any(Predicate&lt;? super T&gt; predicate)表示存在一个值满足条件</li><li>hasElement(T t)表示是否存在该值</li><li>hasElements()表示是否拥有一个或多个元素</li></ul><h4 id="as-compose"><a href="#as-compose" class="headerlink" title="as,compose"></a>as,compose</h4><p>public final </p><p> P as(Function&lt;? super Flux<t>,P&gt; transformer)<br>转化flux为一个目标类型。<br>官方例子：flux.as(Mono::from).subscribe()<br>将flux通过Mono.from函数转化为mono<br>public final <v> Flux<v> compose(Function&lt;? super Flux<t>,? extends Publisher<v>&gt; transformer)<br>compose与as的区别是转化类型做了限制，必须继承Publisher，同时compose是惰性的。在很多时候，写法上没有差别如flux.compose(Mono::from).subscribe()   </v></t></v></v></t></p><h4 id="blockFirst-blockLast"><a href="#blockFirst-blockLast" class="headerlink" title="blockFirst,blockLast"></a>blockFirst,blockLast</h4><p>阻塞至第一个或者最后一个值处理完成</p><h4 id="butter系列"><a href="#butter系列" class="headerlink" title="butter系列"></a>butter系列</h4><p>该系列实例方法很多，作用是将一系列元素，分成一组或者多组，该方法可用在按组批量操作上，例如，以时间间隔分组，批量添加数据。</p><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>如其名缓存，相当于复制一份用于接下来的操作，而当前的流将会被缓存起来，用于之后的操作。</p><h4 id="cancelOn"><a href="#cancelOn" class="headerlink" title="cancelOn"></a>cancelOn</h4><p>public final Flux<t> cancelOn(Scheduler scheduler)<br>取消</t></p><h4 id="cast"><a href="#cast" class="headerlink" title="cast"></a>cast</h4><p>public final <e> Flux<e> cast(Class<e> clazz)<br>强转</e></e></e></p><h4 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h4><p>用于检测当前节点，流中是否存在错误</p><h4 id="collect系列"><a href="#collect系列" class="headerlink" title="collect系列"></a>collect系列</h4><p>该系列实例方法，用于收集所有的元素到特定类型，如list、map等<br>处理完成时返回Mono</p><h4 id="concatMap系列-flatMap系列"><a href="#concatMap系列-flatMap系列" class="headerlink" title="concatMap系列,flatMap系列"></a>concatMap系列,flatMap系列</h4><p>举例说明吧，[[1,2],[4,5],[6,7,8]] -&gt; [1,2,4,5,6,7,8]起这种转化作用<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/concatmap.png" alt=""><br>flatMap系列一样  </p><h4 id="concatWith"><a href="#concatWith" class="headerlink" title="concatWith"></a>concatWith</h4><p>与concatMap不同，这是相加<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/concat.png" alt="">  </p><h4 id="defaultIfEmpty"><a href="#defaultIfEmpty" class="headerlink" title="defaultIfEmpty"></a>defaultIfEmpty</h4><p>public final Flux<t> defaultIfEmpty(T defaultV) 默认值  </t></p><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p>public final Flux<t> distinct()<br>去重，相对与jdk8，多了下面两种方法<br>public final <v> Flux<t> distinct(Function&lt;? super T,? extends V&gt; keySelector)<br>public final &lt;V,C extends Collection&lt;? super V&gt;&gt; Flux<t> distinct(Function&lt;? super T,? extends V&gt; Supplier<c> distinctCollectionSupplier)<br>去除与V匹配的和第二个不怎么理解，，，这让我想到了filter  </c></t></t></v></t></p><h4 id="do系列"><a href="#do系列" class="headerlink" title="do系列"></a>do系列</h4><p>还系列有doOnNext,doOnError,doOnCancel等等，均表示完成后触发</p><h4 id="elementAt"><a href="#elementAt" class="headerlink" title="elementAt"></a>elementAt</h4><p>返回某一位置的值，类型为Mono<t>，可以设置默认值</t></p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>public final Flux<t> filter(Predicate&lt;? super T&gt; p)<br>过滤出满足条件的  </t></p><h4 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h4><p>public final <k> Flux&lt;GroupedFlux&lt;K,T&gt;&gt; groupBy(Function&lt;? super T,? extends K&gt; keyMapper)<br><img src="https://raw.githubusercontent.com/reactor/reactor-core/v3.1.0.RC1/src/docs/marble/groupby.png" alt=""><br>分组，根据提供的keyMapper</k></p><h4 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h4><p>标记一下，写到h接下来还有一些要写，暂时不写了，太累。。。先写会实践（实践提前放在开头，入门）  </p><p><em>未完待续</em></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebFlux </tag>
            
            <tag> Reactor </tag>
            
            <tag> Reactive </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Data Jpa与Mybatis的选择</title>
      <link href="/simple/2017/09/10/almond/Spring-data-jpa-and-Mybatis/"/>
      <url>/simple/2017/09/10/almond/Spring-data-jpa-and-Mybatis/</url>
      
        <content type="html"><![CDATA[<p>看了会jpa的文档，感觉挺不错的，如果都是增删改和简单查询，那基本就不用写sql，同时数据库也交由jpa管理，省心。<br>当然jpa也绝对不全是优点，当默认的规范生成sql不能满足我们的业务的时候。mybatis直接写sql更简单，更易实现。而且，我们也可以更好的调整sql以提升性能（sql的调优后，性能成倍提高的）。   </p><blockquote><p>那么，他们之间改怎么选择呢  </p></blockquote><a id="more"></a><h3 id="使用-spring-data-jpa"><a href="#使用-spring-data-jpa" class="headerlink" title="使用 spring data jpa"></a>使用 spring data jpa</h3><ul><li>打算自己维护一个开源项目，但却没时间管理数据库（我在这里，准备使用）</li><li>公司的项目是为其他公司服务的，有需要跑在不同数据库上，不追求性能（mybatis也能多数据库，但是你得为不同的数据库写不同的sql）</li><li>小项目，需快速完成  </li><li>报表不多，且对性能要求不高的项目  <h3 id="使用mybatis"><a href="#使用mybatis" class="headerlink" title="使用mybatis"></a>使用mybatis</h3></li><li>公司内部系统，由内部员工开发，同时也有专门的dba把控数据库</li><li>对性能要求比较高</li><li>报表较多的项目</li><li>有很复杂的数据库操作</li></ul><blockquote><p>当然最重要的：对哪个熟悉用哪个</p></blockquote><blockquote><p>不知道写全没，最后引用一句话：jpa适合领域模型，mybatis适合事务脚本</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jpa </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shiro拦截器与过滤器</title>
      <link href="/simple/2017/08/10/almond/shiro-filter-and-interceptor/"/>
      <url>/simple/2017/08/10/almond/shiro-filter-and-interceptor/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇是对 <a href="http://www.iteye.com/blogs/subjects/shiro" target="_blank" rel="noopener">开涛的《跟我学shiro》</a> 的部分章节补充，更详细的探讨shiro的过滤器和拦截器</p></blockquote><h3 id="拦截器与过滤器定义"><a href="#拦截器与过滤器定义" class="headerlink" title="拦截器与过滤器定义"></a>拦截器与过滤器定义</h3><ul><li>过滤器是一个程序，它先于与之相关的servlet或JSP页面运行在服务器上。它依赖于servlet容器。</li><li>拦截器，在AOP（Aspect-Oriented Programming）中用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。拦截是AOP的一种实现策略。</li></ul><p>在shiro中存在下图关系<br><img src="https://jiangtj.github.io/assets/img/others/shiro%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8.PNG" alt="shiro"></p><a id="more"></a><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>在开涛博客中 <a href="http://jinnianshilongnian.iteye.com/blog/2025656" target="_blank" rel="noopener">第八章 拦截器机制——《跟我学Shiro》</a> 这里的拦截器主要为过滤器，依赖于servlet，并存在shiro-web包中。开涛讲的很完整，没必要继续讲解，这块不懂得，先点进去了解。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>那么shiro的拦截器又在哪里，怎么调用的呢？</p><p>其实，shiro对使用注解方式，进行权限控制的过程是通过拦截器来实现的。接下以spring中集成shiro注解为例，讲解shiro的实现过程。</p><h4 id="step1-spring配置shiro-注解提供类"><a href="#step1-spring配置shiro-注解提供类" class="headerlink" title="step1: spring配置shiro 注解提供类"></a>step1: spring配置shiro 注解提供类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">getAuthorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">    AuthorizationAttributeSourceAdvisor advisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">    advisor.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> advisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，需要为spring提供AuthorizationAttributeSourceAdvisor的实例，同时，将shiro 安全管理器赋值给它</p><h4 id="step2-AuthorizationAttributeSourceAdvisor的实现"><a href="#step2-AuthorizationAttributeSourceAdvisor的实现" class="headerlink" title="step2: AuthorizationAttributeSourceAdvisor的实现"></a>step2: AuthorizationAttributeSourceAdvisor的实现</h4><p>先看源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationAttributeSourceAdvisor</span> <span class="keyword">extends</span> <span class="title">StaticMethodMatcherPointcutAdvisor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ... <span class="comment">//省略了部分</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> SecurityManager securityManager = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationAttributeSourceAdvisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setAdvice(<span class="keyword">new</span> AopAllianceAnnotationsAuthorizingMethodInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">getSecurityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecurityManager</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.securityManager = securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... <span class="comment">//省略了部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>StaticMethodMatcherPointcutAdvisor</code>的构造函数中提供<code>AopAllianceAnnotationsAuthorizingMethodInterceptor</code>来为其提供注解拦截器。</p><h4 id="step3-AopAllianceAnnotationsAuthorizingMethodInterceptor"><a href="#step3-AopAllianceAnnotationsAuthorizingMethodInterceptor" class="headerlink" title="step3: AopAllianceAnnotationsAuthorizingMethodInterceptor"></a>step3: AopAllianceAnnotationsAuthorizingMethodInterceptor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAllianceAnnotationsAuthorizingMethodInterceptor</span> <span class="keyword">extends</span> <span class="title">AnnotationsAuthorizingMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AopAllianceAnnotationsAuthorizingMethodInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;AuthorizingAnnotationMethodInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList(<span class="number">5</span>);</span><br><span class="line">        AnnotationResolver resolver = <span class="keyword">new</span> SpringAnnotationResolver();</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> RoleAnnotationMethodInterceptor(resolver));</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> PermissionAnnotationMethodInterceptor(resolver));</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> AuthenticatedAnnotationMethodInterceptor(resolver));</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> UserAnnotationMethodInterceptor(resolver));</span><br><span class="line">        interceptors.add(<span class="keyword">new</span> GuestAnnotationMethodInterceptor(resolver));</span><br><span class="line">        <span class="keyword">this</span>.setMethodInterceptors(interceptors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... <span class="comment">//省略了部分</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步定了注解获取类<code>SpringAnnotationResolver</code>和一系列默认的注解拦截器，如果不使用<code>SpringAnnotationResolver</code>，shiro会调用自身的<code>DefaultAnnotationResolver</code>,初步看了一下，这两类基本差不多，都是获取注解用的。<br>默认的注解拦截器有以下几种：</p><ul><li>RoleAnnotationMethodInterceptor 角色注解拦截器，对应<code>@RequiresRoles</code>，判断用户是否拥有角色，下面的权限同理</li><li>PermissionAnnotationMethodInterceptor 权限注解拦截器，对应<code>@RequiresPermissions</code></li><li>AuthenticatedAnnotationMethodInterceptor 授权注解拦截器，对应<code>@RequiresAuthentication</code>，判断用户是否已被授权</li><li>UserAnnotationMethodInterceptor 用户注解拦截器，对应<code>@RequiresUser</code>，检查用户是否通过记住密码的方式登陆，该注解必须进行登陆操作才能通过</li><li>GuestAnnotationMethodInterceptor 访客注解拦截器，对应<code>@RequiresGuest</code>，比较少见的注解，表示未登录用户访问的接口。</li></ul><h4 id="step4-AuthorizingAnnotationMethodInterceptor"><a href="#step4-AuthorizingAnnotationMethodInterceptor" class="headerlink" title="step4: AuthorizingAnnotationMethodInterceptor"></a>step4: AuthorizingAnnotationMethodInterceptor</h4><p>所有的默认拦截器都继承<code>AuthorizingAnnotationMethodInterceptor</code>，我们以权限拦截器为例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionAnnotationMethodInterceptor</span> <span class="keyword">extends</span> <span class="title">AuthorizingAnnotationMethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionAnnotationMethodInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> PermissionAnnotationHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionAnnotationMethodInterceptor</span><span class="params">(AnnotationResolver resolver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> PermissionAnnotationHandler(), resolver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里构造函数内提供了<code>PermissionAnnotationHandler</code>权限注解的处理类，提供权限判断。到这里一切都清晰了，需要自定义注解一个一个自定义下来，并提供一个新的继承自<code>AuthorizingAnnotationMethodInterceptor</code>的类。需要重写默认拦截器，需要覆盖对应的处理类。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>在一个项目中，我需要重新写权限的判断。开始，我重写了<code>PermissionsAuthorizationFilter</code>然而未进该类。不得已，盯着注解一步步走下去。原来shiro内部是这样的，为此，我总算是下定决心学spring security了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写给我的朋友，Java学习之路</title>
      <link href="/simple/2017/08/09/almond/for%20friend,%20how%20working%20in%20java/"/>
      <url>/simple/2017/08/09/almond/for%20friend,%20how%20working%20in%20java/</url>
      
        <content type="html"><![CDATA[<h3 id="最重要的"><a href="#最重要的" class="headerlink" title="最重要的"></a>最重要的</h3><p>选择程序猿，便意味着你始终要学习。如果说想着看完这里的全部，就能靠这混吃一辈子，那还是放弃把。<br>这里是我的曾今学习的方式，但我的学习方法可能不是很适合你。所以我只当只领路羊，接下来的学习，都得靠你自己。<br>加油！</p><a id="more"></a><h3 id="思维脑图"><a href="#思维脑图" class="headerlink" title="思维脑图"></a>思维脑图</h3><blockquote><p><a href="http://naotu.baidu.com/file/1b2db44c2a2805df3364bb7c49b9e198?token=13ccc33fc9a41655" target="_blank" rel="noopener">点这里查看图片</a>  </p></blockquote><p>这是大概的学习树，但并不全。比如maven，学java必须知道的项目构建工具，但只要了解并会简单的使用可以了，maven会随着你java的水平的提高而提高。有比如Javascript、html等前端知识，学java必须了解一些。当然学习前端，后端知识也需要懂一些。<br>先看图，了解个大概，接下来我按后端学习的内容，一步一步的讲述我的经历。</p><h3 id="First：基础"><a href="#First：基础" class="headerlink" title="First：基础"></a>First：基础</h3><p>我是科班出生的，第一次接触java是java基础课。那时候都是用java命令行操作，对java文件编译及运行。这时学习的是java的概念和基本的操作。练手的话可以写个小例子。  </p><blockquote><p>任务1：建两个类，为苹果和香蕉，它们有编号和数量（有初始值）属性，要求分别对其实例化，控制台分别输入编号和消耗数量之后，打印剩余数量，再次要求输入编号和数量（循环）。  </p></blockquote><p>第二次接触java便是web课，也是java最擅长的领域。学了java web基础servlet（等你学过去估计就忘了，当熟练主流框架后，回过来看这是满重要的），还有个已经被淘汰的框架struts2。老师也教了一个企业级的框架ssh（现在也快淘汰了），但是没听懂。这里也布置个任务  </p><blockquote><p>任务2：用最基础的方式（jsp + servlet）实现个java web服务。  </p></blockquote><p>接下来还有没有java课，没印象了，毕竟就算有，技术也熟练了应付过去没问题。<br>基础部分就这样，我花了4年(其实也没那么多，印象里好像就两节android和三节java课吧)，但你肯定没那么多时间，多看看基础书把，弄清概念。任务1与2解决，基本基础过关了。  </p><blockquote><p>java基础书很多，百度以后一大把，挑新的看  </p></blockquote><h3 id="Second：框架"><a href="#Second：框架" class="headerlink" title="Second：框架"></a>Second：框架</h3><p>框架很重要，甚至可以说你用这框架，感觉不是在写java。java里spring框架是‘轻量级’的最流行的框架。也是必学的。<br>从这里开始，就需要接触maven了。java的构建方式有多种，最主要是maven（web）和gradle（android），这两个工具作用差不多，现在越来越多的人选择用gradle构建web应用。但maven仍是主流，教程多，学习的话推荐。  </p><blockquote><p>从本质上来说：构建工具做的事是，将你现在的项目中，按照一定的规范，将文件编译后放到指定目录下，将依赖中的jar包下载下来放到指定目录下，并打包。  </p></blockquote><p>它是用来替换原本的打包方式的，主要是解决各种jar包的问题，原本的打包需要自己找jar包下载，并放入指定目录。<br>就框架而言，ssm现在的主流，下面的教程讲解的很明白。若是遇到不懂，解决不懂的地方，再向下看。这个视频中的js写的贼溜，这块实在看不懂可以先跳过。</p><h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><ul><li><a href="http://www.imooc.com/learn/587" target="_blank" rel="noopener">慕课网：Java高并发秒杀API之业务分析与DAO层</a></li><li><a href="http://www.imooc.com/learn/631" target="_blank" rel="noopener">慕课网：Java高并发秒杀API之业务分析与SERVICE层</a></li><li><a href="http://www.imooc.com/learn/630" target="_blank" rel="noopener">慕课网：Java高并发秒杀API之业务分析与WEB层</a></li><li>提高：<a href="http://www.imooc.com/learn/632" target="_blank" rel="noopener">慕课网：Java高并发秒杀API之高并发优化</a></li></ul><blockquote><p>任务3：实践很重要，跟着这个视频打一遍，并自己搭建框架实现简单的用户管理系统，要求用最新的稳定依赖。下面是maven仓库搜索地址。</p></blockquote><ul><li><a href="http://mvnrepository.com/" target="_blank" rel="noopener">国内maven仓库搜索</a></li><li><a href="http://search.maven.org/" target="_blank" rel="noopener">官方maven仓库搜索</a></li><li>还有视频中提到的<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis官方文档</a></li><li>作为提高，再推荐一份博客，他里面对java8 Lambda讲述的很到位<a href="http://zh.lucida.me/" target="_blank" rel="noopener">lucida的博客</a></li></ul><h3 id="Third：Spring-Boot"><a href="#Third：Spring-Boot" class="headerlink" title="Third：Spring Boot"></a>Third：Spring Boot</h3><p>先来一段百科</p><blockquote><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p></blockquote><p>所以，它不是新东西，只是简化配置用的，本质上仍是spring那套。给你两份教程，学去吧。</p><blockquote><p>任务4：学的过程中将之前的工程改成spring boot，记住之前的是ssm框架有Mybatis。</p></blockquote><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><ul><li>一份讲的很全的博客<a href="http://blog.didispace.com/categories/Spring-Boot/page/4/" target="_blank" rel="noopener">http://blog.didispace.com/categories/Spring-Boot/page/4/</a></li><li>一个慕客网上的视频：<a href="http://www.imooc.com/learn/767" target="_blank" rel="noopener">2小时学会Spring Boot</a> </li><li>这个人的另一份视频：<a href="http://www.imooc.com/learn/810" target="_blank" rel="noopener">Spring Boot进阶之Web进阶</a></li></ul><p>到这里，回忆一下之前的最基础的servlet和jsp写的web服务，是不是有很大的不同，那么问题就来了，spring是怎么实现的</p><blockquote><p>额外任务：参照spring mvc，写一个简单的Web应用框架，实现web请求到Controller的过程，简单点，假设参数都是string类型的。当然这个过程很困难，需要学习很多东西，如java的注解、spring mvc的原理（aop）或者说动态代理、java的反射等等。但这对于理解spring非常的有用。</p></blockquote><h3 id="Fourth：数据库"><a href="#Fourth：数据库" class="headerlink" title="Fourth：数据库"></a>Fourth：数据库</h3><p>之前的学习，已经接触数据库，写过sql了把，没什么好讲的，看书。不过作为开发增删改查会就行，查稍微麻烦点。</p><h3 id="Fifth：思想"><a href="#Fifth：思想" class="headerlink" title="Fifth：思想"></a>Fifth：思想</h3><p>呃。。先来段重构这书中的一句把</p><blockquote><p>软件工程领域的超级经典巨著，与另壹巨著《设计模式》并称”软工双雄”，全美销量超过100000册，亚马逊书店伍星书。</p></blockquote><p>这就是经典，还有代码大全，据说也是可以不断来回看</p><h3 id="Sixth：架构"><a href="#Sixth：架构" class="headerlink" title="Sixth：架构"></a>Sixth：架构</h3><p>其实到了这里，你不一定要学架构，可以继续学习java，java很难，尤其是底层，里面大量的涉及编译原理，jvm最好的虚拟机，没有之一。  </p><p>也可以走产品，你已经有代码基础了，在看些产品书，我觉得会比直接往产品方向发展更好。因为你更懂你的战友，你在设计时，也会考虑他们的情况。  </p><p>还可以dba，这玩意就要求对数据库操作很精通了。</p><p>我未来可能往架构方向发展也可能产品，目前就想多学点技术  </p><p>这里推荐个博客学习spring cloud</p><blockquote><p>其实就是之前那个spring boot的博主<a href="http://blog.didispace.com/categories/Spring-Cloud/" target="_blank" rel="noopener">http://blog.didispace.com/categories/Spring-Cloud/</a>  </p></blockquote><blockquote><p>额外任务：按着教程写个一整套spring cloud玩玩，好像是这个博主出过一本书《spring cloud微服务实战》，挺不错的</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>越往后，学习的路就越宽阔，学无止境。引用一句名言<strong>吾生也有涯，而知也无涯 。以有涯随无涯，殆已！</strong>。所以，当你完成所有任务，我便领完了路，然后各奔东西把。</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>经常有人问培训怎么样，我想说有人教，比你自学肯定要快，补基础不错的，但是也很贵。但学程序后面都是靠自学，没有人教你，养成好习惯更重要，只靠培训是没用的。所以培训可去可不去。  </p><blockquote><p>在学习java过程中，其他工具也要学学，比如git，无论你是从事什么开发，都是必备的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git教程</title>
      <link href="/simple/2017/08/08/almond/git-start/"/>
      <url>/simple/2017/08/08/almond/git-start/</url>
      
        <content type="html"><![CDATA[<p>先推荐三篇教程，帮助大家快速熟悉，最好按顺序学习~  </p><h3 id="廖雪峰老师的git教程"><a href="#廖雪峰老师的git教程" class="headerlink" title="廖雪峰老师的git教程"></a>廖雪峰老师的git教程</h3><p>这篇教程，百度搜git教程第一篇就是，廖雪峰老师讲的很清楚，非常适合新人学习及了解概念   </p><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/</a></p></blockquote><h3 id="idea里git实战"><a href="#idea里git实战" class="headerlink" title="idea里git实战"></a>idea里git实战</h3><p>这篇讲idea中git的可视化操作。大部分时间，我们使用git都是可视化的，概念清楚的情况下，放心用   </p><blockquote><p><a href="http://blog.csdn.net/autfish/article/details/52513465" target="_blank" rel="noopener">http://blog.csdn.net/autfish/article/details/52513465</a></p></blockquote><a id="more"></a><h3 id="Pro-Git-中文版"><a href="#Pro-Git-中文版" class="headerlink" title="Pro Git 中文版"></a>Pro Git 中文版</h3><p>这就比较高级了，是git官方推荐的教程</p><blockquote><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p></blockquote><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><blockquote><p>git标准工作流<a href="http://mzeht.com/2017/05/28/Gitflow-%E5%B7%A5%E4%BD%9C%E6%B5%81/" target="_blank" rel="noopener">http://mzeht.com/2017/05/28/Gitflow-%E5%B7%A5%E4%BD%9C%E6%B5%81/</a><br>github工作流<a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener">https://guides.github.com/introduction/flow/</a><br>gitlab工作流<a href="https://about.gitlab.com/2014/09/29/gitlab-flow/" target="_blank" rel="noopener">https://about.gitlab.com/2014/09/29/gitlab-flow/</a>  </p></blockquote><p>在所有工作流里，github工作流定义的最简单适合简单团队协作，gitlab工作流对其进行了扩充，相比于github工作流更适合企业场景。而git标准工作流。对于分支的划分更清晰，但其太过复杂，需在分支之间需要频繁切换，易出错，而不被推荐。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java设计模式之建筑者模式.</title>
      <link href="/simple/2016/07/18/almond/Java-builder-example/"/>
      <url>/simple/2016/07/18/almond/Java-builder-example/</url>
      
        <content type="html"><![CDATA[<p>初看java设计模式-建造者模式时，肯定有和我一样有疑惑的。网上的例子几乎都一样，但是却没new xxx.Builder().buildxx().buildxx()…这样的。那么我今天来讲讲这种建造者模式的实现。</p><p>首先按照我的惯例，先给例子后解说</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>Product.java<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jtj.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String part1;</span><br><span class="line"><span class="keyword">private</span> String part2;</span><br><span class="line"><span class="keyword">private</span> String part3;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPart1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> part1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart1</span><span class="params">(String part1)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.part1 = part1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPart2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> part2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart2</span><span class="params">(String part2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.part2 = part2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPart3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> part3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart3</span><span class="params">(String part3)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.part3 = part3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StringBuilder().append(part1)</span><br><span class="line">.append(<span class="string">","</span>)</span><br><span class="line">.append(part2)</span><br><span class="line">.append(<span class="string">","</span>)</span><br><span class="line">.append(part3)</span><br><span class="line">.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Product product;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span></span>&#123;</span><br><span class="line">product=<span class="keyword">new</span> Product();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">buildPart1</span><span class="params">(String part1)</span></span>&#123;</span><br><span class="line">product.setPart1(part1);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">buildPart2</span><span class="params">(String part2)</span></span>&#123;</span><br><span class="line">product.setPart2(part2);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">buildPart3</span><span class="params">(String part3)</span></span>&#123;</span><br><span class="line">product.setPart3(part3);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jtj.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Product product = <span class="keyword">new</span> Product.Builder()</span><br><span class="line">        .buildPart1(<span class="string">"qq"</span>)</span><br><span class="line">.buildPart2(<span class="string">"2"</span>)</span><br><span class="line">.buildPart3(<span class="string">"sa"</span>)</span><br><span class="line">.build();</span><br><span class="line">System.out.println(product.getProduct());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qq,<span class="number">2</span>,sa</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>product是产品，是我们需要构建的对象，里面有静态的构造器Builder，由于是静态类，里面构造方法在使用的时候最开始便会构造，也就是里面的product每次使用时都会先实例化一个。<br>之后每次buildxxx后，我们可以看到返回的都是this,也就是这个静态类，就是这个原因，我们便可以在后面不断的连续buildxxx。<br>最后通过一个build返回所实例化的product。  </p><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><blockquote><p>Lombok更优雅的方式实现建造者模式（17-10-25更新）</p></blockquote><p>Lombok,可以通过注解方式，减少大量的臃肿的代码。比如getter和setter，看着就头疼。使用Lombok，你可以直接@Getter和@Setter来代替这部分，当然一般都是@Data，把一些列常用的注解都加上。<br>除了这些，它还提供了一些其他的不常用到的注解，来消除特定场合的臃肿的代码。比如@Cleanup减少try…catch，@Log减少写获取log实例的代码。这些都很实用。<br>当然，这里要讲的是与建造者相关的@Builder，还是看代码把<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">//=@Setter @Getter @ToString @EqualsAndHashCode</span></span><br><span class="line"><span class="comment">//这个@Builder就是用来生成建造者模式的，只需要小小的一个注解，就能实现了</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="comment">//下面两个注解，因为@Builder必须要全属性构造方法，才能使用。</span></span><br><span class="line"><span class="comment">//虽然默认会生成全属性构造方法，但使用@NoArgsConstructor会覆盖掉这个默认，因此需要添加@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现过程相当简单，为它我也编写了一个测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个也是Lombok的一个注解</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEntityTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestEntity entity = TestEntity.builder()</span><br><span class="line">                .name(<span class="string">"MrJ"</span>)</span><br><span class="line">                .age(<span class="number">100</span>)</span><br><span class="line">                .build();</span><br><span class="line">        log.error(entity.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在控制台中看到有<code>TestEntity(name=MrJ, age=100)</code>的输出，证明是成功的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java动态代理小例子.</title>
      <link href="/simple/2016/07/17/almond/java-proxy-example/"/>
      <url>/simple/2016/07/17/almond/java-proxy-example/</url>
      
        <content type="html"><![CDATA[<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>1，先创建teacher接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manageWork</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2,创建teacher实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherA</span> <span class="keyword">implements</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manageWork</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+<span class="string">"开始布置作业："</span>+s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>3,创建teacher代理类,java 的动态代理就是通过Proxy.newProxyInstance这个静态方法生成<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object teacher;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Class&lt;?&gt; cls)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">teacher =cls.newInstance();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Teacher <span class="title">getTeacher</span><span class="params">(Class&lt;?&gt; cls)</span></span>&#123;</span><br><span class="line">TeacherProxy proxy=<span class="keyword">new</span> TeacherProxy();</span><br><span class="line">proxy.setTeacher(cls);</span><br><span class="line"><span class="keyword">return</span> (Teacher) Proxy.newProxyInstance(cls.getClassLoader(), cls.getInterfaces(), proxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//System.out.println("代理类名字："+proxy.getClass().getName());</span></span><br><span class="line">System.out.println(teacher.getClass().getSimpleName()+<span class="string">"的课代表通知老师"</span>);</span><br><span class="line">Object o=method.invoke(teacher, args);</span><br><span class="line">System.out.println(teacher.getClass().getSimpleName()+<span class="string">"的任务完成"</span>);</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们在main中写一下代码运行,其中student只是普通的类，不在这里写出来了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Teacher teacherProxyA=TeacherProxy.getTeacher(TeacherA.class);</span><br><span class="line">Teacher teacherProxyB=TeacherProxy.getTeacher(TeacherB.class);</span><br><span class="line">teacherProxyA.manageWork(<span class="string">"语文作业"</span>);</span><br><span class="line">teacherProxyB.manageWork(<span class="string">"数学作业"</span>);</span><br><span class="line"><span class="keyword">new</span> StudentA().doWork();</span><br><span class="line"><span class="keyword">new</span> StudentB().doWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后能看到下面的结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TeacherA的课代表通知老师</span><br><span class="line">TeacherA开始布置作业：语文作业</span><br><span class="line">TeacherA的任务完成</span><br><span class="line">TeacherB的课代表通知老师</span><br><span class="line">TeacherB开始布置作业：数学作业</span><br><span class="line">TeacherB的任务完成</span><br><span class="line">StudentA开始做作业</span><br><span class="line">StudentB开始做作业</span><br></pre></td></tr></table></figure></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如上面结果所示，teacherProxyA是由Proxy产生的动态代理类，它拥有接口所对应的方法，调用这个方法其实就是调用invoke方法。<br>在invoke中，调用的是他所代理对象的方法。<br>所以说，动态代理很强大，他可以在代理过程中执行拦截或者记录日志，spring的aop核心便是这个。<br>除此之外，不得不提一下retrofit框架，这是面向android的RESTful网络请求框架，他的核心也是动态代理，不过，对于所有的请求都提供一样的实现，而所有的参数都通过flied值与注解来得到，然后通过okhttp提交并返回call对象。这种实现很精彩。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
